#! /bin/bash

# x11docker
# Run GUI applications and desktop environments in docker on a separate X server.
# Provides GPU acceleration and pulseaudio sound. Circumvents some X security leaks.
# Type 'x11docker --help' or scroll down to read usage information.
# https://github.com/mviereck/x11docker

Version="2.5.0"

changelog() {

# x11docker changelog
# 07.04.2017 V2.5.0   Stable release.
#                     Last version including options --xpra-image --xorg-image --xdummy-iage
#                     Future development: Wayland support
# 29.03.2017 V2.4.4   bugfix xpra #1469: resizing windows left unrefreshred rectangles
# 25.03.2017 V2.4.3   bugfix/typo $Bgidfile in finish() 
#                     slight adjustments in WM range
# 25.03.2017 V2.4.2   bugfix installer - calling in new positioned parser prevented installing
# 25.03.2017 V2.4.1   minor bugfix in finish
# 24.03.2017 V2.4.0   parsing respects "arguments with whitespaces"
#                     always generate logfile
#                     avoid tail kill message
#                     dismissed --cid --command --privileged --pid --net --uts
#                     exit on parsing error
# 22.03.2017          +extension XINERAMA, remove xpra fakexinerama-files
#                     colored output for warning and error messages
#                     parsing without eval
#                     tee output of tail in x11docker.log
# 21.03.2017          --hostdisplay: create new cookie instead of extracting from ~/.Xauthority, allows untrusted cookies
#                     --untrusted: new option to create untrusted cookies to restrict X access (especially no keylogging)
#                     --dockerenv: new option showing dockerrun options to access X server
#                     dev option --xhost now works in *-image 
# 19.03.2017          cleanup xinitrc
#                     minor bugfix: remove softlink to unix socket for *-image
#                     --display: new developer option, preset display number
#                     --no-auth: new developer option, disable cookie authentication
#                     cd to new $HOME on --hostuser
#                     create different $Newxenv depending on options
# 17.03.2017          check xpra  on host for --xorg-image
#                     remove check for group docker disabling password prompt
# 13.03.2017          file timetosaygoodbye in $Sharefolder terminates X if image command is given
#                     --xonly: restore previous behaviour terminating X server on WM ogout 
# 13.03.2017 V2.3.1   bugfix in parser deciding --xonly, --exe
#                     partial included timetosaygoodbye in finish()
# 12.03.2017 V2.3.0   bugfix for xpra >=v1.0 : --socket-dir now needs --bind
#                     --log and --LOG dismissed
#                     --tcp works again. Now setting "-listen tcp" for Xorg>=1.17.0
# 11.03.2017          bugfix: remove sockets within container, not afterwards. Avoids permiision error with rm on host
#                     improved archaic parsing of -- second options
# 10.03.2017          create dummy xorg.conf in "create X command", create cachefolder in "check display" again
#                     enable --exe for --*-image
#                     new option --xonly to explicitly run new X server only
#                     shrink down window manager search+config, check x-window-manager
# 10.03.2017 V2.2.1   bugfix: --xorg did not recognize already running X0
# 09.03.2017          minor bugfix: create cache folder before creating xorg.conf 
#                     new variable $Newxenv
# 08.03.2017 V2.2.0   bugfix #8: change : to - in homefolder name (option --home)
# 07.03.2017          show xmessage on errors if not running in terminal
# 06.03.2017          --xdummy-image: new option, ivisible X server Xdummy in image
#                     renamed xpra-attach to xpra-image
#                     error Xmessage if image comand is missing without a terminal to prompt for password
# 05.03.2017          collect shared files in container folder /x11docker
#                     hopefully avoided clipboard error now
#                     removed $Xinitjobstokill as it can lead to unwarrented kills
#                     --env. new option, show $DISPLAY, $XAUTHORITY, $XSOCKET, $XPRA_XSHM on stdout
# 01.03.2017          bugfix: Disable MIT-SHM in xpra to avoid MB increasing server logfile
#                     --xorg-image: new option for Xdummy in image
#                     --xpra-image now uses Xdummy and cookies
# 28.02.2017          --install/--update: create /usr/share/doc/x11docker with README.md and LICENSE.txt
#                     disable compression in xpra as not needed for local connection
#                     removed --webcam=no in xpra attach - new versions only, and container already does not have access to it
# 27.02.2017 V2.1.2   Imagecommand in shared file /x11docker_CMD instead of submitting directly to docker run to avoid issues with & && > ; and the like 
#                     renamed /Xclientcookie to /X11docker_cookie, /creatuser to /x11docker_createuser
# 24.02.2017 V2.1.1   bugfix in parser
# 24.02.2017 V 2.1.0  new options --install --update --remove / integrating x11docker-installer.sh
# 24.02.2017 V 2.0.1  minor bugfix syntax
# 24.02.2017 V 2.0.0  bugfix: xpra crashes on debian 9, leaving black screen. See debian bug 855980
#                     version check for xpra on option --xpra-attach
# 23.02.2017          created x11docker-install.sh
# 21.02.2017          changed onlyX to xonly
#                     merged pull request #6 / avoid docker bug in createuser
#                     new option --xpra-attach: Use xpra server in image
#                     changed --X11 to --xorg
# 20.02.2017          --auto: don't autochoose xpra or Xephyr on tty1-6
#                     minor bugfix: only call xrandr if DISPLAY is set (Xaxis/Yaxis)
#                     changed many shortopts
#                     easier setup of Xwrapper.config
#                     minor bugfix: avoid window manager grep error with Hostdisplay fallback
# 20.02.2017 V1.7.1   Use vt1...vt6 if running on tty1...tty6
# 18.02.2017 V1.7.0   new option --nopwd: Don't ask for password
#                     check if /etc/X11/Xwrapper.config exists
# 18.02.2017 V1.6.2   bugfix in xinitrc: removed $ from $Windowmanagerpid=...
# 17.02.2017          added hint for 'needs_root_rights=yes' in part 'check X server'
# 17.02.2017 V1.6.1   bugfix for Ubuntu 16.04 - edit /etc/X11/Xwrapper.config and add line 'needs_root_rights=yes'
# 13.02.2017 V1.6.0   logo changed from jpeg to png / x11docker-gui
#                     new developer option --vt: set virtual console to use
# 12.02.2017          minor bugfix: Only show warning for missing virtualgl if option --virtualgl was chosen
# 10.02.2017 V1.5.9   bugfix: Ubuntu since 16.04 needs xserver-xorg-legacy to be installed and reconfigured instead of x11-common for option --X11
# 10.02.2017 V1.5.8   bugfix: option --root needs Getroor="bash -c" instead of "". Members of group docker: same bug and bugfix
# 10.02.2017 V1.5.7   renamed $Command to $Dockercommand
# 09.02.2017          minor bugfix: $Xpralogfile has to be $Xpraserverlogfile
# 02.01.2017          minor bugfix x11docker-gui: "check orphaned" now regards "--sudo"
# 30.12.2016          renamed all variables from VARIABLE to Variable
# 29.12.2016          renamed MATCHFOLDERS and MATCHCONTAINERS in Orphanedfolders and Orphanedcontainers
#                     renamed XOPTIONS to XSERVEROPTIONS, WINDOWTITLE to XephyrWINDOWTITLE, NO_XHOST to NOXHOST
#                     renamed PULSE_PORT to PulseaudioTCPPORT, PULSE_MODULE_ID to PulseaudioMODULEID 
# 13.12.2016          touch /etc/sudoers in createuser if option --sudouser
# 02.12.2016          minor bugfix: Tcpdisplay with option --hostdisplay and --tcp now points to :0 instead of :300. Will fail anyway, but now for right reasons :-D
# 24.11.2016 V1.5.6   some comments
#                     improved usage information (--help)
#                     minor bugfix: on option --hostuser without a given image command, warnings were invisible without --verbose
# 12.11.2016 V1.5.5   create desktop starter with $0 if x11docker is not found within $PATH
# 10.11.2016          improved --help message
#                     if no image or host executable is given and autochoosing Xephyr and no WM is given, look for WM
#                     removed check for Sharenet to enable tcp -> now developer options only
#                     don't echo device files on --gpu
#                     option -retro for all X servers
#                     x11docker-gui now checks for executeable ./x11docker, too
# 08.11.2016          minor bugfix: typo SHAPEIPC instead Shareipc: set QT_GRAPHICSSYSTEM=opengl if $Xserver=Hostdisplay
#                     removed unused JOBSTOKILL
# 05.11.2016 V1.5.4   some code cleanup
#                     removed $XTERM
#                     removed config file, not neccessary
#                     renamed XEXTENSIONS to Xserveroptions
#                     explicitly enable extension XTEST for xpra/Xdummy, disable for X11 and Xephyr as not needed
#                     renamed XephyrARGS and XpraARGS to Xephyroptions and Xpraoptions
#                     bugfix: add container user to vglusers group. check has been for group 'pulse' instead
# 31.10.2016 V1.5.3   bugfix: use Xorg instead of X to be able to run Xdummy for xpra without root privileges
# 31.10.2016 V1.5.2   bugfix: disabled Alsa 
#                     additional warnings if window manager is missing.
# 26.10.2016 V1.5.1   enable/disable MIT-SHM environment variables on Hostdisplay only.
#                     removed variable DOCKERUSER, no longer needed
#                     usage (--help) info correction: use --ipc with --hostuser only, not --hostdisplay 
#                     some code cleanup
#                     only create Adduserhomefolder and symbolic link ~/x11docker if Adduserhomefolder does not exist
# 25.10.2016 V1.5.0   solved problems with MIT-SHM, --ipc and --net. Extension MIT-SHM has to be explicitly disabled on new X servers!
#                     (Still no way to disable MIT-SHM with option --hostdisplay except for QT applications)
#                     using shared X socket instead of X over tcp as default now. '-nolisten tcp' on all X servers
#                     option --net moved to developer options
# 24.10.2016 V1.4.3   minor bugfix: show warning on --ipc or --net without --hostuser, not other way around
# 24.10.2016 V1.4.2   show warning if --ipc or --net without --hostuser/--sudouser
# 23.10.2016          some more code cleanup, especially parts "create docker command" and "create xinitrc"
#                     replacing STARTDISPLAY with Hostdisplay, same with Hostxauthority, new variable Hostxsocket
#                     included comments in xinitrc
# 21.10.2016          some code cleanup
# 20.10.2016 V1.4.1   bugfix: removed creating of non-existing vgl cookie
# 20.10.2016 V1.4.0   new options --net and --ipc: Security holes, can avoid rendering glitches with --gpu and allow Gpu access over tcp
# 19.10.2016          developer options --ipc --pid --net --uts
# 18.10.2016          bugfix: set Newdisplay to Hostdisplay with option --exe
# 17.10.2016 V1.3.0   securitytable() shows table with grade of container isolation depending on chosen options
#                     -x : autochoose xephyr instead of xpra if no image is given -> runs xephyr with windowmanager instead of empty useless xpra
#                     bugfix: only be verbose on option --verbose
# 16.10.2016          removed all left xhost +SI:whatever settings, only cookies in use now. Thanks to http://stackoverflow.com/a/25280523/5369403
#                     --hostdisplay: official option now, classic X socket sharing without container isolation
#                     -x / autochoose server as default, instead of X11 as default
#                     --X11 new option, explicitly choosing core new X server
#                     --orphaned: show only basenames of orphaned folders
#                     changed cache deletion in finish() to match --hostdisplay cache folders
#                     check environment variables set by vglrun instead of static setting
# 15.10.2016          --hostdisplay: developer option, classic sharing of host display via x socket, breaking container isolation
# 13.10.2016 V1.2.1   some improvements using VirtualGL
#                     don't unload pulseaudio tcp module on exit to avoid pulseaudio daemon stop
#                     Xdummy instead of Xvfb for xpra - dependency xvfb lost
# 12.10.2016          bugfix: set X11dockermode on default xonly
#                     repair damaged parser
# 12.10.2016  V1.2.0  --virtualgl: Mediate hardware acceleration with VirtualGL in all X servers possible now. Drawback: Full access to :0, breaking container isolation if not using core X
#                     developer options: --xsocket, --sharegpu
#                     bugfix: +extension MITSHM disabled videos in Xephyr
# 11.10.2016          bugfix developer option --xhost: set xhost - on host display at end of xinitrc
#                     Testing with --virtualgl, share libs and environment variables
# 10.10.2016  V1.1.3  unified --verbose and --Verbose to --verbose
#                     fixed help message if running as root without option --root
# 08.10.2016          developer options --devel --xhost --virtualgl
#                     bugfix: tail -F for log now shows all files frm beginning. was missing --retry -n +1
#                     change --orphaned: remove all cache files 
# 06.10.2016  V1.1.2  back to X over tcp. Marked --gpu as experimental. --gpu still with shared socket
# 05.10.2016  V1.1.1  --glamor: added again
#                     using /tmp/x11docker instead of ~.cache/x11docker
# 04.10.2016          disabled X over tcp, sharing new X socket instead.
#                     authentication with xhost +SI:localuser:user and cookie.
# 04.10.2016  V1.1.0  --gpu new option for hardware acceleration. drawback= needs xhost +SI:localhost:user instead of cookie, but no tcp
#                     removed --glamor, keep it as default
#                     set tty to use for core X server with $Newxvt
#                     enabled SelectToClipboard in xterm
# 02.10.2016          --glamor: new option enables Xephyr 2d acceleration
#                     enabled many X extensions
# 01.10.2016          bugfix: removed -glamor in Xephyr for better support of kwin, added +extension GLX +extension RENDER +extension RANDR
# 30.09.2016  V 1.0.5 improved --orphaned; create named containers to check for
#                     rename option --zombiecheck to --orphaned
# 30.09.2016  V 1.0.4 improved creating desktop starter: prompting for name
#                     check for existing $Bgpidfile on exit to avoid error message
# 29.09.2016  V 1.0.3 new option --pulseaudio: sound with pulseaudio over tcp
# 24.09.2016  V 1.0.2 new upload on github
# 24.09.2016          New option --no-xhost: disable any access to host X server granted by xhost
#                     Fixed minor bug: set xkbmap in xephyr after XAUTHORITY&DISPLAY has been set
#                     Set Hostxauthority as $HOME/.Xauthority if $XAUTHORITY is empty
#                     Exit on error while parsing options
#                     Avoid error message of xclip setting empty CLIP to " "
# 23.09.2016          new option: orphaned. Check for not cleanly removed containers and cache files
# 05.09.2016          bugfix: parsing $Imagecommand
#                     included MIT license text in script.
#                     waiting up to 10 instead of 5 seconds for docker to terminate
# 01.09.2016          some scripting improvements
# 30.08.2016          bugfix: cache folder was prevented from being deleted
#                     create symbolic link in $HOME to ~/.local/share/x11docker
#                     change Cachefolder from ~/.cache/x11docker to /tmp/x11docker
#                     create file bgpids on init to avoid error message on option --help
#                     show warning if running pure X with window manager without logout option
# 28.10.2015          improved shared clipboard with Xephyr / minor bug fix for clips with more than 1 line
#                     removing not allowed chars in desktop starter file names
#                     finish(): make sure only cache subfolder will be deleted
# 25.10.2015  V 1.0.1 options --log and --LOG - show log in terminal on display :0 or new display
# 24.10.2015          minor bug fix: parsing: replaced sed with cut ( "/" in $Imagecommand caused sed bug)
# 20.10.2015          improved exit handling
# 16.10.2015  V 1.0
  : 
}
usage() {               # --help: show usage information
    echo "
x11docker: Create a new X server & run GUI applications and desktop 
         environments in docker and show them on your display.
         Useful to avoid security issues concerning X forwarding.
         Doesn't have dependencies inside of docker images.

If using xpra or Xephyr (recommended, see options '--xpra' and '--xephyr'):
 * The dockered applications will appear on your regular desktop.
   (needs no tty switching, 'x11-common' doesn't need to be changed)
 * Packages 'xpra' and/or 'xephyr' must be installed. 
If using X server from Xorg (option -xorg):
 * To start x11docker from console, switch to tty1 with <CTRL><ALT><F1>.
   (Fails on Ubuntu 16.04 due to an Ubuntu bug)
 * To start x11docker from within an already running X session:
    Edit file </etc/X11/Xwrapper.config> and replace line 
        allowed_users=console
    with the following two lines:
        allowed_users=anybody
        needs_root_rights=yes
    If this file is missing (since debian 9 and Ubuntu 16.04): 
    Install package 'xserver-xorg-legacy' first.
 * To switch between displays/X servers, press <CTRL><ALT><F7>...<F12>
If neither xpra nor Xephyr are installed, and Xwrapper.config is not edited,
only less secure option --hostdisplay will work out of the box from within X.

Usage:
To run a docker image with new X server (auto-choosing X server option):
   x11docker [OPTIONS] IMAGE [COMMAND]
   x11docker [OPTIONS] -- '[DOCKER_RUN_OPTIONS]' IMAGE [COMMAND [ARG1 ARG2 ...]]
To run a host application on a new X server:
   x11docker [OPTIONS] --exe COMMAND
   x11docker [OPTIONS] --exe -- COMMAND [ARG1 ARG2 ...]
To run only a new X server with window manager:
   x11docker [OPTIONS]

 * The new X server will be terminated once [docker] application is closed.
 * On systems without a root password like Ubuntu, use option '--sudo'.
 * x11docker is designed to run images only. New containers will be discarded.

Options:
 -h, --help            display this message and exit
     --license         show license of script (MIT) and exit
 -w, --wm COMMAND      window manager to use (otherwise, x11docker tries to run
                       a new instance of the current running window manager; if
                       that's not possible, it will look for a recommended one)
                       (no effect if choosing --xpra or --hostdisplay)
 -d, --desktop         don't run any host window manager on new X server;
                       image contains its own desktop and/or window manager
 -e, --exe             execute host application on new X server (no docker)
X server options: 
 -a, --auto            auto choose X server for docker applications (default)
 -x, --xorg            use new core Xorg server beneath display :0
 -0, --hostdisplay     share host display :0, BREAKS CONTAINER ISOLATION.
                       (least overhead of all X server usage variations)
 -r, --xpra            use xpra to show application windows on display :0
                       (needs package 'xpra' to be installed on host)
 -y, --xephyr          use Xephyr to show desktops in a window on display :0
                       (needs package 'xephyr' to be installed)
   -F, --fullscreen    run Xephyr in fullscreen mode
   -S, --size XxY      set Xephyr screen size (f.e. 800x600 )
   -R, --resizeable    make Xephyr window resizeable (Note: some window
                       managers/desktops won't like this and may misbehave)
   -G, --glamor        enable Xephyr glamor 2D acceleration
special X servers:
--xdummy               Invisible X server for custom setups of VNC, xpra
                       or network access.
--xpra-image           Use xpra server inside of image. (needs package 'xpra'
                       to be installed on host and in image)
--xorg-image           Use xorg server inside of image, attach with xpra on host
                       (needs xorg-core and xorg-video-dummy in image)
--xdummy-image         Use Xorg/Xdummy inside of image, invisible on host
                       (needs xorg-core and xorg-video-dummy in image)
User and homedir options:
 -u, --hostuser        create a user in container similar to host user
                       (same UID, same GID, same name)
 -U, --sudouser        same as '--hostuser', but container user gains root
                       permissions per sudo without password
 -m, --home            share folder ~/x11docker/Imagename in host home folder
                       with created container.
Clipboard and sound options:
 -c, --clipboard       share clipboard between X servers (works best with --xpra
                       Options --xorg and --xephyr: text clipboard only) 
 -p, --pulseaudio      enable sound with pulseaudio over tcp. Needs
                       pulseaudio to be installed on host and in image
GPU options:
 -l, --virtualgl       hardware acceleration with VirtualGL. Needs virtualgl
                       to be installed on host. BREAKS CONTAINER ISOLATION
                       from display :0 if used with --xpra or --xephyr.
 -g, --gpu             Hardware accelerated OpenGL rendering. Needs mesa-utils
                       in image to be installed, sometimes 'x11-utils' too.
                       Works with options --xorg and --hostdisplay only.
                       Can get additional speed-up with option --ipc
 -i, --ipc             ISOLATION BREAKDOWN: container access to interprocess
                       communication and shared memory from host.
                       Use with option --hostuser only to minimize risks.
Advanced options:
 -s, --sudo            use 'sudo' to run 'su -c docker ...' (Ubuntu special)
 -n, --nopwd           don't ask for root password
 -N, --no-xhost        disable any access to host X server granted by xhost
 -t, --untrusted       create untrusted cookies. Restricts X access, avoids
                       keylogging with --hostdisplay, but some applications
                       will crash. OpenGL does not work.
     --starter         create starter on desktop and exit
     --orphaned        check for non-removed containers and left cache files 
                       possibly owned by root and created by docker
     --root            allow root to run x11docker. Default: No
                       (A new X server should not run with root privileges)
 -v, --verbose         be verbose

Developer options:
     --tcp             Conect to new X over tcp instead of sharing X socket
     --vt N            use vt / tty N
     --display N       use display number N
 -E, --env             echo \$DISPLAY, \$XAUTHORITY and \$XSOCKET on stdout
     --dockerenv       echo docker run options to access new X server
     --ps              preserve container on exit (as a default, x11docker sets
                       docker run option '--rm' to remove created container)
     --cache           don't delete cache files on exit (including logs)
     --sharegpu        share device files in /dev/dri
     --xhost           set \"xhost +\" on both X servers (test purposes only!)
     --no-auth         disable cookie authentication (test purposes only)
 
Installation options  (need root permissions):
     --install        install x11docker (and x11docker-gui) on your system
                      (uses /usr/local/bin) (creates icon and desktop entry)
                      (creates /usr/share/doc/x11docker for readme and license)
     --update         update x11docker with latest version from github
     --remove         remove x11docker from your system

Dependencies: depending on chosen options, x11docker needs some packages
         to be installed. It will check for them on startup and show messages 
         if some are missing. List of possibly needed packages:
         docker.io xorg xpra xserver-xephyr xclip pulseaudio virtualgl wmctrl
         xserver-xorg-legacy

Window manager: x11docker works fine with most common window managers.
         x11docker tries to detect your current running window manager to 
         start a new instance of it on the new display. Otherwise, choose
         one you like. Recommendations:
          * Lightweight and desktop independent:
$Wm_recommended_desktop_light 
          * Heavy and desktop independent:
$Wm_recommended_desktop_heavy
          * Lightweight, no desktop options: (if you run only X server and
            window manager, you would need an exit/logout option)
$Wm_recommended_nodesktop_light
          * Heavy, no desktop options:
$Wm_recommended_nodesktop_heavy
         _NOT_ recommended:
          * Known to have problems in some situations: 
$Wm_ugly
          * Known not to work at all:
$Wm_bad

------------------------------------------------------------------------------
Table to show grade of container isolation | software  | --virtualgl | --gpu
depending on chosen options                | rendering |             |
------------------------------------------------------------------------------
--xpra         = xpra server on host       |  ++++     |  +:0        |  -
--xephyr       = Xephyr server on host     |  ++++     |  +:0        |  -
--xorg         = core Xorg server on host  |  ++++     |  +++        |  +++
--hostdisplay  = share host display :0     |  +:0      |  +:0        |  +:0
--xdummy       = invisible X server        |  ++++     |  +:0        |  -
--xpra-image   = xpra server in image      |  +++++    |  +:0        |  -
--xorg-image   = X in image, xpra on host  |  +++++    |  +:0        |  -
--xdummy-image = invisible X in image      |  +++++    |  +:0        |  -
------------------------------------------------------------------------------
--ipc = Breaks isolation. Additional speedup for option --gpu and avoiding
        rendering glitches with option --hostdisplay. Use with --hostuser only.
        Container access to host interprocess communication and shared memory.
        Allows X server MIT-SHM extension.
------------------------------------------------------------------------------
+++++ highest container isolation; does not use any X server on host
++++  high container isolation, secure to use.
+++   high container isolation, slightly degraded by container access to GPU.
+:0   low container isolation due to X security leaks, considered insecure.
      (full access to X server on display :0 with host applications.
       For example, keylogging is possible. For use with trusted images only.)
-     does not work and slightly insecure.
------------------------------------------------------------------------------
x11docker version $Version
"
}
license() {             # --license: show license (MIT)
echo 'MIT License

Copyright (c) 2015, 2016 Martin Viereck

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.'
}
error() {               # show error messages on stderr and exit
  Message="x11docker ERROR: $* 
  Type 'x11docker --help' for usage information
  For debugging, run x11docker in terminal and/or enable option '--verbose'
  and look at logfile $Cacherootfolder/x11docker.log"
  echo "$(tput setaf 1)x11docker ERROR$(tput sgr0)" >&2
  echo "$Message" >&2
  [ -t 1 ] || echo "$Message" | xmessage -file - -default okay
  [ -e $Logfile ] && echo "$Message" >> $Logfile
  exit 1
}

{ #### part: variable descriptions and default settings
Cacherootfolder=$HOME/.cache/x11docker          # define cache folder to store temporary files
mkdir -p $Cacherootfolder
Sharefolder="share"                             # subfolder for shared files
Socketfolder="socket"                           # subfolder for container sockets
Cshare="/x11docker"                             # mountpoint of $Sharefolder in container
Logfile="x11docker.log"

X11dockermode="run"                             # can be either "xonly", "run" or "exe", depends on options. while parsing, xonly changes to run or exe
Dockeroptions=""                                # options for docker without image name/image args
X11dockerargs="$@"                              # arguments for x11docker, later without arguments for docker
Argument=""                                     # variable to step through arguments
Imagename=""                                    # name of image to run
Imagecommand=""                                 # name of image [+ command+args]
Hostexe=""                                      # can contain host executable
Imagecommandscript="x11docker_CMD"              # name of shared script containing imagecommand
Containername=""                                # name of container, set by x11docker, to make --orphaned able to find orphaned containers

Dockerip=""                                     # IP adress of docker interface
Dockeriprange=""                                # IP adress of docker interface including suffix /16
Dockerpid=""                                    # process ID of docker container
Xinitrc=xinitrc                                 # file to store xinitrc commands
Xinitlogfile=xinit.log                          # file to log output of X server
Xtermrc=xtermrc                                 # file to store xtermrc commands
Xtermlogfile=xterm.log                          # file to log output of xterm
Dockerlogfile=docker.log                        # file to log output of docker
Dockerpidfile=docker.pid                        # file to store process ID of docker
Cidfile=containerID                             # file to store container ID number
Bgpidfile=backgroundpids                        # file to store PidS and names of background processes that shut be killed on exit

Xserver=""                                      # X server to use ( one of Xorg | Xpra | Xephyr | Hostdisplay)
Newxenv=""                                      # environment variables for new X server DISPLAY XAUTHORITY XSOCKET XPRA_XSHM
Dockerenv=""                                    # docker run options to access new X server
Autochooseserver="yes"                          # option '-x': automated choosing server
Xserveroptions=""                               # X extensions to enable and other X options
Hostxauthority=$XAUTHORITY                      # store environment variable pointing to X authority cookies
if [ -z "$Hostxauthority" ] ; then Hostxauthority=$HOME/.Xauthority ; fi  # for unknown reasons XAUTHORITY can be empty. Assuming this path as default
Hostdisplay=$DISPLAY                            # store environment variable containing name of current display
Hostdisplaynumber="$(echo $Hostdisplay | cut -d: -f2 | cut -d. -f1)"  # display number without ":" and ".0"
Hostxsocket="/tmp/.X11-unix/X$Hostdisplaynumber" # X socket from host, needed for --hostdisplay and --virtualgl
Hostxenv="DISPLAY=$Hostdisplay XAUTHORITY=$Hostxauthority XSOCKET=$Hostxsocket" 
Newdisplay=""                                   # new display for new X server
Tcpdisplay=""                                   # option --tcp: X conected over tcp, Tcpdisplay= IP:Display
Xservercookie=Xservercookie                     # file to store new X server cookies
Xclientcookie=Xclientcookie                     # file to store new X client cookies
#Newxlock=""                                     # .Xn-lock - exists for running X server with socket n
Newxsocket=""                                   # New X socket
Newxvt=""                                       # Virtual console to use for core new X server (>7)
Xconnection="xsocket"                           # 'tcp' or 'xsocket'. default: xsocket. X over tcp is still possible, but no longer needed in any case
Sharenewxsocket=""                              # if "yes", share new X socket (now default if not using developer option --tcp)
Xauthentication="yes"                           # use cookie authentication yes/no
Timetosaygoodbye=""                             # command loop to prevent X from terminating if no image ommand or host exeutable is in use

# options for different X servers
Xpraoptions=""
Xephyroptions=""
Xpraserverlogfile=xpraserver.log                # logfile for xpra server
Xprashm=""                                      # "" or "XPRA_XSHM=0" to disable MIT-SHM in xpra
# special for Xephyr
Xephyrwindowtitle=""                            # window title for Xephyr
# Get screen size for use with Xephyr
if [ -n "$Hostdisplay" ] ; then
  Xaxis=$(xrandr --current | grep '*' | tail -1 | awk '{print $1}' | cut -d 'x' -f1)
  Yaxis=$(xrandr --current | grep '*' | tail -1 | awk '{print $1}' | cut -d 'x' -f2)
fi
Xephyrsize="-screen $(($Xaxis-100))x$(($Yaxis-100))"   # option '-z, --size' can change this value. otherwise, a roughly maximized window size is set here
Xephyrfullscreen="no"                           # option '-f, --fullscreen': use fullscreen mode (Xephyr only)
Xephyrglamor="no"                               # option '--glamor': enable Xephyr glamor 2D acceleration
Xephyrresize="no"                               # option '--resizeable': make Xephyr window resizeable

# variables depending on options
Installermode=""                                # --install/--update/--remove

Windowmanager=""                                # option '-w, --wm': window manager to use. if not given but needed, autodetection is used
Desktopimage="no"                               # option '-d, --desktop': if "yes", run desktop environment instead of single application, don't use host window manager
Shareclipboard="no"                             # option '-c, --clipboard' enable clipboard sharing
Shareclipboardscript=clipboard.bash             #    "              "      script used for text clipboard sharing to Xephyr/Xorg 
Showdisplayenvironment="no"                     # option -E, --env: Show environment variables of new display
Showdockerenvironment="no"                      # Show docker run options to access new display
#
Addhostuser="no"                                # option '-u, --hostuser': try to add user to container with same UID and GID as host user
Addsudouser="no"                                # option '-o, --sudouser': same as '-u, --hostuser', but created user gains root access via sudo without password
Createuserscript=createuser                     #   "          "         : file to store commands to create container user
Adduserhome="no"                                # option '-m, --home': share a folder ~/.local/share/x11docker/Imagename with created container
Adduserhomefolder="no"                          #   "        "   : path to shared folder
Benutzer=$USER                                  # name of user to simulate in container
#
Pulseaudiotcpport=""                            # option '--pulseaudio': pulseaudio tcp  to use
Pulseaudio="no"                                 #   "                    use pulseaudio yes/no
Pulseaudiomoduleid=""                           #   "                    number of customized pulseaudio tcp module, output of pactl
#
Orphanedcheck="no"                              # option '--orphaned': check for non-removed containers and maybe root-owned files in cache
Createdesktopstarter="no"                       # option '--starter': create desktop starter and exit yes/no
Allowroot="no"                                  # option '--root': allow root to run x11docker
Getroot="su -c"                                 # option '-s, --sudo' will add 'sudo' to command to get root privileges.
Verbose="no"                                    # option '-v, --verbose': if "yes", be verbose
Preservecachefiles="no"                         # option '--cache': preserve cache files instead of removing them on exit
Preservecontainer="no"                          # option '-p, --ps': if yes, preserve container instead of removing it with 'docker run --rm'
Gpu=""                                          # options '--gpu' and '--virtualgl': Use hardware accelerated OpenGL. Can be empty, "virtualgl" or "xsocket"
Shareipc="no"                                   # option '--ipc': run docker with option --ipc=host
#
Trusted="trusted"                               # create "trusted" or "untrusted" cookies
Noxhost="no"                                    # option '--no-xhost': if yes, disable all X server access granted by xhost
# strings collecting pids of background jobs to be killed before exiting

# some temporary or loop variables
Pid=""
Name=""
Zeit=""
Line=""
Count=""

# developer options
Alsa="no"                                       # option '--alsa': support Alsa audio
Xhost=""                                        # option '--xhost': xhost + on both X servers

# these window managers are known to work well with x11docker (alphabetical order)(excluding $Wm_not_recommended and $Wm_ugly):
Wm_good="amiwm blackbox cinnamon compiz ctwm enlightenment fluxbox flwm fvwm"
Wm_good="$Wm_good jwm kwin lxsession mate-session mate-wm marco metacity muffin mutter notion olwm olvwm openbox ororobus pekwm"
Wm_good="$Wm_good sawfish twm wmaker w9wm xfwm4"
# these wm's are recommended, lightweight AND desktop independent. best first:
Wm_recommended_desktop_light="flwm blackbox fluxbox jwm mwm wmaker afterstep amiwm fvwm ctwm pekwm olwm olvwm openbox lxsession" 
# these wm's are recommended, heavy AND desktop independent. best first:
Wm_recommended_desktop_heavy="lxsession mate-session"
# these wm's are recommended and lightweight, but cannot show desktop options. best first:
Wm_recommended_nodesktop_light="sawfish xfwm4 metacity marco mate-wm "
# these wm's are recommended and heavy, but cannot show desktop options (especially exiting themselves). best first:
Wm_recommended_nodesktop_heavy="muffin mutter kwin cinnamon gnome-shell compiz"
# these wm's are not really useful (please don't hit me) (best first):
Wm_not_recommended="awesome enlightenment evilwm herbstluftwm i3 lwm matchbox miwm spectrwm subtle windowlab wmii wm2"
# these wm's cannot be autodetected by wmctrl if they are already running
Wm_nodetect="aewm aewm++ afterstep awesome ctwm mwm miwm olwm olvwm sapphire windowlab wm2 w9wm"
# these wm's can cause problems (they can be beautiful, though):
Wm_ugly="icewm sapphire aewm aewm++"
# these wm's doesn't work:
Wm_bad="clfswm tinywm tritium"
# List of all working window managers, recommended first: (excluding $Wm_bad)
Wm_all="$Wm_recommended_desktop_light $Wm_recommended_nodesktop_light $Wm_recommended_desktop_heavy $Wm_recommended_nodesktop_heavy $Wm_good $Wm_ugly $Wm_not_recommended $Wm_nodetect"
}

{ #### part: parsing cli options
  Shortoptions="hw:daryxXcFS:RGeuompsnvgliN0UEt"
  Longoptions="auto,x,X,xpra,Xpra,xpra-image,xpra-attach,xorg-image,xdummy,xdummy-image,xephyr,Xephyr,X11,x11,xorg,hostdisplay"  # X servers
  Longoptions="$Longoptions,wm:,desktop,exe,xonly"
  Longoptions="$Longoptions,install,update,remove,version"
  Longoptions="$Longoptions,fullscreen,resizeable,size:,glamor"                                    # Xephyr options
  Longoptions="$Longoptions,clipboard,hostuser,sudouser,home,pulseaudio,gpu,virtualgl"             # comfort options
  Longoptions="$Longoptions,sudo,root,ipc,ps,verbose,cache,nopwd,env,no-xhost,untrusted"       # advanced options
  Longoptions="$Longoptions,starter,orphaned,license,licence,help"                         # special options without starting X server
  Longoptions="$Longoptions,xhost,xsocket,tcp,sharegpu,tcpxsocket,alsa,vt:,display:,no-auth,dockerenv" # developer options, not for regular use
  Parsedoptions="$(getopt --options $Shortoptions --longoptions $Longoptions --name "$0" -- "$@" 2>$Cacherootfolder/parsererror)"
  [ -s "$Cacherootfolder/parsererror" ] && { error $(cat $Cacherootfolder/parsererror) ; }

  # converting $Parsedoptions into an array that can be set as positional parameters. Cumbersome, but avoids usage of eval
  declare -i Count=0
  while [ -n "$Parsedoptions" ] ; do
    case "$(echo "$Parsedoptions" | cut -c 1)" in
      "-") # catch options
        Opt[Count]=$(echo "$Parsedoptions" | cut -d ' ' -f1)
        Parsedoptions=$(echo "$Parsedoptions" | cut -s -d " " -f2-)
      ;;
      "'") # catch arguments
        Opt[Count]=$(echo "$Parsedoptions" | cut -d "'" -f2)
        Parsedoptions=$(echo "$Parsedoptions" | cut -s -d "'" -f3-)
      ;;
      " ") # remove whitespaces 
        Parsedoptions=$(echo "$Parsedoptions" | cut -c2-)
      ;;
      *) echo "Error while parsing $@" && exit 1 ;;
    esac
    Count=Count+1
  done
  set -- "${Opt[@]}"
  
  while [ -n "$1" ] ; do
    case "$1" in
      -h|--help) usage && exit 0  ;;                    # show help/usage and exit
      --license|--licence) license && exit 0   ;;       # show MIT license and exit
      -w|--wm) Windowmanager=$2 && shift   ;;           # custom window manager
      -d|--desktop) Desktopimage="yes"  ;;              # desktop environment or window manager in image; don't run own window manager
      -s|--sudo) Getroot="sudo su -c"  ;;               # use sudo to run 'su -c docker ...'
      -a|--auto) Autochooseserver="yes"    ;;           # use xpra or Xephyr, Xorg or hostdisplay
      -r|--xpra|--Xpra) Xserver="Xpra" ; Autochooseserver="no"  ;;             # use xpra on host
      --xpra-image|--xpra-attach) Xserver="Xpra-image" ; Autochooseserver="no" ;; # use xpra server in image
      #-f|--xpra-shadow) Xserver="Xpra-shadow" ; Autochooseserver="no" ;;          # use xpra on host to shadow Xvfb in image
      #-o|--xpra-proxy)  Xserver="Xpra-proxy" ; Autochooseserver="no" ;;           # use xpra server in x11docker/xpra as proxy 
      -y|--xephyr|--Xephyr) Xserver="Xephyr" ; Autochooseserver="no"  ;;          # use Xephyr
      -x|--xorg|--X11|--x11) Xserver="Xorg" ; Autochooseserver="no"     ;;        # use coe Xorg
      --xorg-image) Xserver="Xorg-image" ; Autochooseserver="no" ;;               # use Xdumm in image and xpra on host
      -0|--hostdisplay) Xserver="Hostdisplay" ; Autochooseserver="no"  ;;         # use host display :0 with shared X socket
      --xdummy) Xserver="Xdummy" ; Autochooseserver="no" ; Showdisplayenvironment="yes" ;;                 # use Xdummy. Invisible on host. For custom network setups with VNC or xpra
      --xdummy-image) Xserver="Xdummy-image" ; Autochooseserver="no" ; Showdisplayenvironment="yes" ;; # use Xdummy in image. Invisible on host. For custom network setups with VNC or xpra
      --xonly) X11dockermode="xonly" ;;
      -E|--env) Showdisplayenvironment="yes" ;;         # output of display number and cookie file on stdout. Catch with  ~$ read xdenv < <(x11docker --env) 
      -c|--clipboard) Shareclipboard="yes"  ;;          # share host clipboard with dockered applications (xpra only)
      -F|--fullscreen) Xephyrfullscreen="yes"  ;;       # fullscreen mode for Xephyr
      -S|--size) Xephyrsize="-screen $2" && shift ;;    # set screen size for Xephyr
      -R|--resizeable) Xephyrresize="yes"  ;;           # make Xephyr window resizeable
      -G|--glamor) Xephyrglamor="yes"  ;;               # enable glamor 2D acceleration in Xephyr
      -p|--pulseaudio) Pulseaudio="yes"  ;;             # enable pulseaudio connection / sound support over tcp
      -g|--gpu) Gpu="immediate" ;;                      # use immediate hardware acceleration, works only with -xorg or --hostdisplay
      -l|--virtualgl) Gpu="virtualgl" ;;                # use hardware acceleration with VirtualGL
      -e|--exe) X11dockermode="exe" ;;                  # execute application from host instead of running docker image
      --root) Allowroot="yes" ;;                        # allow x11docker to be run as root
      -n|--nopwd) Getroot="bash -c" ;;                  # Don't ask for password
      -u|--hostuser) Addhostuser="yes" ;;               # create user similar to host user in created container
      -U|--sudouser) Addhostuser="yes"                  # same as '--hostuser', but with root rights via sudo without password
                     Addsudouser="yes" ;;
      -m|--home) Adduserhome="yes"  ;;                  # share folder ~/x11docker/Imagename with container
      --starter) Createdesktopstarter="yes" ;;          # create desktop starter and exit
      --ps) Preservecontainer="yes"  ;;                 # presreve container instead of removing it with 'docker run --rm'
      --cache) Preservecachefiles="yes"  ;;             # don't remove cache files on exit
      -v|--verbose) Verbose="yes"  ;;                   # be verbose
      --orphaned) Orphanedcheck="yes"  ;;               # check for orphaned containers and files owned by root, created by docker)
      -i|--ipc) Shareipc="yes";;                        # set docker option --ipc=host
      -N|--no-xhost) Noxhost="yes"  ;;                  # disable any access granted by xhost
      -t|--untrusted) Trusted="untrusted"  ;;           # create untrusted cookies
      ##### Installer options 
      --install|--update|--remove) Installermode="$1" ;;
      --version) echo $Version ; exit ;;
      #####some developer options, not for regular use, can change any time
      --xhost) Xhost="+"  ;;                            # set 'xhost +' on both X servers
      --xsocket) Xconnection="xsocket" ;;               # Use shared X socket
      --tcp) Xconnection="tcp";;                        # Use X over tcp
      --sharegpu) if [ -z "$Gpu" ] ; then Gpu="sharegpu" ; fi  ;; # share devices in /dev/dri
      --tcpxsocket) Sharenewxsocket="yes" ; Xconnection="tcp" ;; # Use X over tcp, share X socket, too
      --alsa) Alsa="yes" ;;
      --vt) Newxvt="vt$2" && shift ;;                   # set virtual console to use
      --display) Newdisplaynumber=$2 && shift ;;        # set display to use
      --no-auth) Xauthentication="no" ;;                # disable cookie authentication
      --dockerenv) Showdockerenvironment="yes" ;;       # Show docker run options to access X server  
      ##### docker options / image
      --) shift
        while [ "$1" ] ; do
          [ -z "$Imagecommand" ] && [ "$(echo "$1" | cut -c1)" = "-" ] && Dockeroptions="$Dockeroptions $1"
          [ -z "$Imagecommand" ] && [ "$(echo "$1" | cut -c1)" != "-" ] && Imagecommand="$1" && shift
          [ -n "$Imagecommand" ] && Imagecommand="$Imagecommand $1" && Imagecommand="${Imagecommand## }"
          shift
        done
        Originalimagecommand="$Imagecommand"
        Imagename=$(echo $Imagecommand | cut -d ' ' -f1)
        Imagecommand=$(echo $Imagecommand | cut -s -d ' ' -f2-)
      ;;
      *) error "error parsing $1" ;;
    esac  
    shift
  done
}

warning() {             # show warning message
  echo "$(tput setaf 3)x11docker WARNING:$(tput sgr0) $*" >&2
  echo "" >&2
  [ -e $Logfile ] && echo "x11docker WARNING: $*" >> $Logfile
}
verbose() {             # show verbose messages
  echo "x11docker: $*
  " >> $Logfile
}
installer() {           # options --install, --update, --remove: Installer for x11docker
  # --install:
  #   - copies x11docker and x11docker-gui to /usr/local/bin
  #   - installs icon in /usr/share/icons
  #   - creates x11docker.desktop file in /usr/share/applications
  # --update:
  #   - download and install latest version from github
  # --remove
  #   - remove installed files
  # Prepairing
  case $1 in
    --install)
      [ $(command -v x11docker) ] &&   { error "x11docker seems to be installed already.
  Try 'x11docker --update' instead." ; }
      [ -f "./x11docker" ] ||          { error "File x11docker not found in current folder.
  Try 'x11docker --update' instead." ; }
      [ `command -v kaptain` ] ||      { warning "x11docker-gui needs package kaptain
  to provide a GUI, but could not find kaptain on your system. 
  Please install package kaptain if you want to use x11docker-gui.
  x11docker itself does not need it." ; }
    ;;
    --update)
      mkdir /tmp/x11docker-install
      cd /tmp/x11docker-install
      [ $? ] || error "Could not create or cd to /tmp/x11docker-install"

      echo "Downloading latest x11docker version from github"
      wget https://github.com/mviereck/x11docker/archive/master.zip
      [ $? ] || error "Could not download x11docker-master from github"

      echo "Unpacking archive"
      unzip master.zip
      [ $? ] || error "Could not unzip archive"
  
      echo ""
      cd /tmp/x11docker-install/x11docker-master
    ;;
  esac

  # Doing
  case $1 in
    --install|--update)
      echo "Installing x11docker and x11docker-gui in /usr/local/bin"
      cp x11docker /usr/local/bin/
      chmod +x /usr/local/bin/x11docker
      cp x11docker-gui /usr/local/bin/
      chmod +x /usr/local/bin/x11docker-gui

      echo "Creating icon and application entry for x11docker"
      x11docker-gui --icon
      xdg-icon-resource install --context apps --novendor --size 72 /tmp/x11docker.png x11docker
      rm /tmp/x11docker.png
      echo "[Desktop Entry]
Version=1.0
Type=Application
Name=x11docker
Comment=Run GUI applications in docker images
Exec=x11docker-gui
Icon=x11docker
Categories=System
" > /usr/share/applications/x11docker.desktop

      echo "Storing README.md and LICENSE.txt in /usr/share/doc/x11docker"
      mkdir -p /usr/share/doc/x11docker
      cp README.md /usr/share/doc/x11docker/
      cp LICENSE.txt /usr/share/doc/x11docker/
      
      echo "Installation ready: x11docker version $(x11docker --version)"
    ;;
    --remove)
      echo "removing x11docker from your system"
      rm -v /usr/local/bin/x11docker
      rm -v /usr/local/bin/x11docker-gui
      rm -v /usr/share/applications/x11docker.desktop
      rm -R -v /usr/share/doc/x11docker
      xdg-icon-resource uninstall --size 72 x11docker
    ;;
  esac

  # Cleanup
  case $1 in
    --update)
      echo "Removing downloaded files"
      cd ~
      rm -R /tmp/x11docker-install
    ;;
  esac
}
checkorphaned() {            # option --orphaned : check for non-removed containers and left cache files possibly owned by root and created by docker
  echo "x11docker will check for orphaned containers from earlier sessions.
  This can happen if docker was not closed successfully. If this is the case,
  and option --home was chosen, docker creates missing shared files as
  folders owned by root in your home cache folder. This is annoying. x11docker
  will try to find such containers and delete all x11docker cache files.
  Caution: any currently running x11docker sessions will be terminated, too.
  Please type in your password to get a current list of existing containers:"
  Orphanedcontainers=""
  Orphanedfolders=""
  cd $Cacherootfolder
  while read -r Line ; do
    Orphanedcontainers="$Orphanedcontainers $(echo $Line | cut -d ' ' -f1)"
  done < <($Getroot 'docker ps -a' | grep "x11docker_X")
  Orphanedfolders=$(echo $(find $Cacherootfolder -mindepth 1 -maxdepth 1 -type d))
  if [ -z "$Orphanedcontainers" ] && [ -z "$Orphanedfolders" ] ; then echo "No orphaned containers or cache files found. good luck!"
  else
    echo "Found orphaned containers: $Orphanedcontainers"
    echo -n "Found orphaned folders in $Cacherootfolder: " 
    for Line in $Orphanedfolders ; do echo -n "$(basename $Line) " ; done ; echo ""
    echo "Type in your password to remove orphaned containers and folders:"
    if [ -n "$Orphanedcontainers" ] && [ -n "$Orphanedfolders" ] ; then
      echo $Getroot "'docker rm -f $Orphanedcontainers ; rm -R -f -v $Orphanedfolders'"
      eval $Getroot "'docker rm -f $Orphanedcontainers ; rm -R -f -v $Orphanedfolders'"
    fi
    if [ -n "$Orphanedcontainers" ] && [ -z "$Orphanedfolders" ] ; then
      echo $Getroot "'docker rm -f $Orphanedcontainers'"
      eval $Getroot "'docker rm -f $Orphanedcontainers'"
    fi
    if [ -z "$Orphanedcontainers" ] && [ -n "$Orphanedfolders" ] ; then
      echo $Getroot "'rm -R -f -v $Orphanedfolders'"
      eval $Getroot "'rm -R -f -v $Orphanedfolders'"
    fi
  fi
  echo "Ready."
}
storepid () {           # store pids and names in file $Bgpidfile
  # store Pid and process name of background processes in file
  # $1 should be Pid, $2 should be name of process
  # for use on exit / with trap to clean up with background processes
  # this subroutine has a twin in xinitrc
  echo $1 $2 >> $Bgpidfile
}
finish() {              # trap routine, clean up background processes and cache
  [ -e "$Sharefolder" ] && touch $Sharefolder/timetosaygoodbye

  [ -s "$Bgpidfile" ] && {
    # check for possible remaining background processes stored in $Bgpidfile
    # double check with Pid and name; kill if process is still running
    while read Line ; do 
      Pid=$(echo $Line | awk '{print $1}')
      Name=$(echo $Line | awk '{print $2}')
      if [ -n "$(pgrep $Name | grep $Pid)" ] ; then
        case $Name in
          tail) kill -PIPE $Pid
          ;;
          docker) kill $Pid
            warning "Found remaining docker process. Most probably the
  X session was not closed in a clean way. Can not send TERM signal because 
  docker runs as root. Will wait up to 10 seconds for docker to finish."
            Zeit=`date +%s`
            while [ -n "$(pgrep docker | grep $Pid)" ] ; do
              echo "waiting for docker to terminate ..."
              sleep 0.5
              [ 10 -lt $(echo "`date +%s` - $Zeit" | bc) ] && break
            done
            if [ -n "$(pgrep docker | grep $Pid)" ] ; then
              warning "docker didn't terminate as it should. Will not clean
  cache to avoid file permission problems. You should stop docker and remove
  the new container with command:
docker stop `cat $Cidfile` && docker rm `cat $Cidfile`
  or let x11docker do the work for you: 
x11docker --orphaned"
              Preservecachefiles="yes"
            else
              echo "docker container terminated successfully"
            fi
          ;;
          *) warning "Found remaining background process.
  Will send signal TERM to process $Line"
            kill $Pid
          ;;
        esac
      fi
    done < $Bgpidfile
  }
  
  # keep copy of logile
  [ -e "$Sharefolder" ] && cp $Logfile $Cacherootfolder/x11docker.log
  
  # option '--cache': [don't] remove cache files
  [ "$Preservecachefiles" = "no" ] && [ -n "$(echo $Cachefolder | grep .cache)" ] && [ "x11docker" != "$(basename $Cachefolder)" ] && rm -f -R $Cachefolder
}
verlte() {              # version number checker $1 less than or equal $2 
  [  "$1" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]
}
verlt() {               # version number checker $1 less than $2 
  [ "$1" = "$2" ] && return 1 || verlte $1 $2
}
waitforfilecreation() { # replacement for inotify-wait: wait up to 10s for a file to be created
  # return 1 on timeout
  # $1 file to wait for. Can be a expression like *
  Zeit=$(date +%s)
  while [ ! "$(find  $1 2>/dev/null)" ] ; do
    sleep 0.1
    Count=$(expr $(date +%s) - $Zeit)
    [ 10 -lt $Count ] && return 1
    echo -n "."
  done
}
no_xhost() {            # remove any access to X server granted by xhost
  xhost
  xhost | tail -n +2  /dev/stdin | while read Line ; do  # read all but the first line (header)
    xhost -$Line                                         # disable every entry
  done
  xhost -                                                # enable access control
}
askforimagecommand() {  # ask for password to extract image command if needed and not given (options --hostuser, --xorg-image)
  [ -t 1 ] || { error "You need to specify an image command. Please specify one
  or run in terminal for more info and password prompt to get CMD from image. Exit."
  }
  warning "No command for image specified. Need to look for
  CMD command of docker image. Please type in your password to run 
  $Getroot 'docker inspect --format='{{.Config.Cmd}}' $Imagename'"
  Imagecommand=`$Getroot "docker inspect --format='{{.Config.Cmd}}' $Imagename"`
  Imagecommand=$(echo "$Imagecommand" | tr -d [])
  Imagecommand=$(echo "$Imagecommand" | sed 's/\/bin\/sh -c//')
  Originalimagecommand="$Imagecommand"
  warning "To avoid this password prompt, you can start x11docker
  next time with command:
    x11docker $X11dockerargs $Imagecommand"
  X11dockerargs="$X11dockerargs $Imagecommand"
}
waitforxpraserver() {   # wait for xpra server to be ready. 
  # $1 points to logfile
  # exit 1 on fail
  Zeit=$(date +%s)
  while [ -z "$(cat $1 | grep 'xpra is ready')" ] ; do
    echo "waiting for xpra server to be ready..." && sleep 0.5
    [ 15 -lt $(expr $(date +%s) - $Zeit) ] && { echo "x11docker: Timeout error: xpra server not ready after 15 seconds. Exiting."  ; exit 1 ; } 
  done
}

{ #### part: some init (parsing, checking permissions)
  trap finish EXIT

  # options --install --update --remove
  [ -n "$Installermode" ] && {
    [ "0" = "$(id -u)" ] || { error "Must run as root to install, update or remove x11docker." ; }
    installer $Installermode
    exit
  }

  ## check if script runs as root, if yes, show error & exit
  #
  if [ "$Allowroot" = "no" ] ; then   # option '--root': if "yes", allow root to run x11docker
    if [ "0" = "$(id -u)" ] ; then
        error "x11docker should not run as root. Every child process of 
  the new X server would get root privileges, too. To run docker, you will be
  prompted for your root password only for this one command.
  On systems without a root password, like Ubuntu, choose option '-s, --sudo'
  If you want to allow root to run x11docker, use option '--root'"
    fi
  else
    if [ "0" = "$(id -u)" ] ; then Getroot="bash -c" ; fi   # if running as root and it is allowed, then disable password prompt
  fi

  ## if desktop starter should be created, check if xdg-user-dir is installed
  #
  if [ "$Createdesktopstarter" = "yes" ] ; then
    command -v "xdg-user-dir" >/dev/null 2>&1 || { error "could not find xdg-user-dir.
  x11docker needs it to create a desktop starter. Please install xdg-utils with
  command:
  apt-get install xdg-utils" ; }
  fi
  
  ## option --orphaned : check for non-removed containers and left cache files possibly owned by root and created by docker
  if [ "$Orphanedcheck" = "yes" ] ; then 
    checkorphaned
    exit
  fi
  
  ## option '--virtualgl': check if VirtualGL is installed
  if [ "$Gpu" = "virtualgl" ] ; then
    command -v "vglrun" >/dev/null 2>&1 || { warning "could not find VirtualGL.
  It has to be installed on host to use option --virtualgl. 
  You can get in here: http://www.virtualgl.org/
  Fallback: disabling option --virtualgl" 
      Gpu="" ; }
  fi
  
  ## option '--pulseaudio': find a free tcp port
  if [ "$Pulseaudio" = "yes" ] ; then
    read Lowerport Upperport < /proc/sys/net/ipv4/ip_local_port_range
    while : ; do
      Pulseaudiotcpport="`shuf -i $Lowerport-$Upperport -n 1`"
      ss -lpn | grep -q ":$Pulseaudiotcpport " || break
    done
  fi
  
  [ "$Addhostuser" != "yes" ] && [ "$Shareipc" = "yes" ] && {
    warning "You have chosen option --ipc without choosing
  option --hostuser. This is quite a breakdown to host security.
  To minimize risks with option --ipc, please choose option 
  --hostuser, too!"
  }
  
  # check whether x11docker runs on tty1-tty6
  # console users have use their own tty for X since debian 9
  if [ -n "$(tty | grep tty)" ] && [ "$Newxvt" = "" ] ; then Newxvt="vt$(tty | cut -c9-)" ; fi
}

{ #### part: check X server

  ## option '-x': Try to auto choose best matching and available X server
  #
  if [ "$Autochooseserver" = "yes" ] ; then
    if [ "$Desktopimage" = "no" ] ; then
        Xserver="Xpra"      # use xpra for single applications
    else
        Xserver="Xephyr"    # use Xephyr for desktop environments
    fi
    if [ -z "$Imagename$Hostexe" ] ; then # if no image or host executable is given, run Xephyr with window manager instead of empty xpra
      Xserver="Xephyr"
      #if [ "$Windowmanager" = "" ] ; then Windowmanager="lookfornewwindowmanager" ; fi
    fi
    if [ -n "$(tty | grep tty)" ] ; then Xserver="Xorg" ; fi  # if running on tty1-tty6, only core X will work
  fi

  ## check if chosen X server is installed
  #
  if [ "$Xserver" = "Xpra" ] || [ "$Xserver" = "Xpra-image" ] || [ "$Xserver" = "Xorg-image" ] ; then       # check xpra
    command -v "xpra" >/dev/null 2>&1 || { warning "could not find executable 'xpra'. 
  Try 'apt-get install xpra' to install xpra.
  Fallback: x11docker will try to use Xephyr (option --xephyr)"
    Xserver="Xephyr"
    }
  fi
  if [ "$Xserver" = "Xpra-image" ] ; then                                 # check xpra version for --xpra-image
    xpra --version > $Cacherootfolder/xpraversion
    echo "xpra v0.17.6" >> $Cacherootfolder/xpraversion 
    if [ "`sort -V < $Cacherootfolder/xpraversion| head -n 1`" != "xpra v0.17.6" ] ; then 
      warning "You need xpra version v0.17.6 at least for option --xpra-image.
  You have installed: $(xpra --version).
  Fallback: x11docker will try to use xpra on host (option --xpra)"
      Xserver="Xpra"
    fi
  fi  
  if [ "$Xserver" = "Xephyr" ] ; then                               # check Xephyr
    command -v "Xephyr" >/dev/null 2>&1 || { warning "could not find executable 'Xephyr'. 
  Try 'apt-get install xserver-xephyr' to install Xephyr.
  Fallback: x11docker will try to use core X (option --xorg)"
    Xserver="Xorg"
    }
  fi
  if [ "$Xserver" = "Xorg" ] ; then                                  # check X
    command -v "X" >/dev/null 2>&1 || { error "Could not find executable 'X'. 
  Try 'apt-get install xorg' to install X server." 
    }
    # if x11docker is running from within an X server, check if user is allowed to run a new core X server
    if [ -z "$Newxvt" ] ; then
      if [ ! -e "/etc/X11/Xwrapper.config" ] || [ -z "`grep "allowed_users=anybody" </etc/X11/Xwrapper.config`" ] ; then
        warning "You are not allowed to start a second X server. As a default 
  configuration of X, only root or console users can start a second X server.
  
  You can switch to one of tty1...tty6 with <STRG><ALT><F1>...<F6>
  and start x11docker there. (Fails on Ubuntu 16.04 due to Ubuntu bug.) 
  
  Look at 'x11docker --help' how to setup Xwrapper.config to be able to run
  a second core X server from within an already running X session.

  Fallback: Using host display without container isolation"
      Xserver="Hostdisplay"
      fi
    fi
  fi
  
  case $Xserver in
    Xpra|Xephyr|Hostdisplay|Xpra-image|Xorg-image) [ -z "$Hostdisplay" ] && error "You only can run $Xserver within an already running X server."  ;;
  esac
}

{ #### part: check free display, create cache folder and subfolder and rename cache files
  mkdir -p $Cacherootfolder
  [ -z "$Newdisplaynumber" ] && {
    # Look for next free display and change some display specific variables
    case $Xserver in                         # set initial value for searching
      Xorg) Newdisplaynumber="0" ;;
      Xpra) Newdisplaynumber="100" ;;
      Xephyr) Newdisplaynumber="200" ;;
      Hostdisplay) Newdisplaynumber="300" ;; # dummy number to look for free cache folder, display will be :0
      Xdummy) Newdisplaynumber="400" ;;
      Xpra-image) Newdisplaynumber="500" ;;
      Xorg-image) Newdisplaynumber="600" ;;
      Xdummy-image) Newdisplaynumber="700" ;;
    esac
    #
    while [ -e "/tmp/.X11-unix/X$Newdisplaynumber" ] || [ -h "/tmp/.X11-unix/X$Newdisplaynumber" ]  || [ -d "$Cacherootfolder/X$Newdisplaynumber" ] ; do   # search unused X socket, passing already used cache numbers
      Newdisplaynumber=$(($Newdisplaynumber + 1))
    done
  } || {
    [ -e "/tmp/.X11-unix/X$Newdisplaynumber" ] || [ -h "/tmp/.X11-unix/X$Newdisplaynumber" ]  || [ -d "$Cacherootfolder/X$Newdisplaynumber" ] && error "Display :$Newdisplaynumber is already in use"
  }
  #
  Cachefolder="$Cacherootfolder/X$Newdisplaynumber"                # set name of cache subfolder
  Sharefolder="$Cachefolder/$Sharefolder"                          # folder shared with container
  Socketfolder="$Sharefolder/$Socketfolder"
  Logfile="$Sharefolder/$Logfile"
  #
  Xinitrc="$Cachefolder/$Xinitrc"
  Xinitlogfile="$Cachefolder/$Xinitlogfile"
  Xtermrc="$Cachefolder/$Xtermrc"
  Xtermlogfile="$Cachefolder/$Xtermlogfile"
  Dockerlogfile="$Cachefolder/$Dockerlogfile"
  Dockerpidfile="$Cachefolder/$Dockerpidfile"
  Xservercookie="$Cachefolder/$Xservercookie"
  Xclientcookie="$Sharefolder/$Xclientcookie"
  Xpraserverlogfile="$Cachefolder/$Xpraserverlogfile"
  Cidfile="$Cachefolder/$Cidfile"
  Bgpidfile="$Cachefolder/$Bgpidfile"
  Createuserscript="$Sharefolder/$Createuserscript"
  Imagecommandscript="$Sharefolder/$Imagecommandscript"
  Shareclipboardscript="$Cachefolder/$Shareclipboardscript"
  Newxsocket="/tmp/.X11-unix/X$Newdisplaynumber"
  #Newxlock="/tmp/.X$Newdisplaynumber-lock"
  if [ "$Newxvt" = "" ] ; then Newxvt="vt$[7+$Newdisplaynumber]" ; fi    # FIXME: assuming instead of knowing whether VT is free

  Newdisplay=":$Newdisplaynumber"
  
  case $Xserver in
    Hostdisplay)
      Newdisplay=$Hostdisplay
      Newxsocket=$Hostxsocket ;;
  esac
 
  ## Get inet Adress of docker0 interface and
  #  set $Tcpdisplay (display number for dockered applications connected to X over tcp)
  #  (not used anymore, but still possible with developer option --tcp)
  Dockeriprange=`ip -4 -o a | grep docker0 | awk '{print $4}'`
  Dockerip=`echo $Dockeriprange | cut -d/ -f1`
  Tcpdisplay="$Dockerip$Newdisplay"
  
  case $Xconnection in
    tcp)     Usedisplay=$Tcpdisplay ;; # option --tcp
    xsocket) Usedisplay=$Newdisplay ;; # default
  esac
   
  ## create display specific cache subfolder
  #
  mkdir $Cachefolder
  mkdir $Sharefolder
  mkdir $Socketfolder
  :> $Logfile
}

{ #### part: choose and check window manager
  case $Desktopimage in
  yes) Windowmanager=""  ;;
  no)
    case $Xserver in
    Xpra|Xpra-image|Xorg-image|Hostdisplay) 
      Windowmanager="" 
      ;; # disable window manager if xpra (or host display) does this job
    Xephyr|Xorg|Xdummy|Xdummy-image)
      # try to find out current window manager to use it for x11docker (i.e. run a new instance of it)
      [ -z "$Windowmanager" ] && Windowmanager=$(command -v $(ls -l /etc/alternatives/x-window-manager | cut -d ">" -f2))
      # try with wmctrl
      if [ -z "$Windowmanager" ] && [ -n "$(command -v 'wmctrl')" ]  ; then        # option '-w, --wm': maybe a window manager is already set
        Windowmanager=`wmctrl -m | grep "PID" | awk '{print $2}' `                 # wmtrl, if installed, can find already running wm. at first get pid
        if [ -e "/proc/$Windowmanager" ] ; then                                    # check if pid is valid
          Windowmanager=`ls -l "/proc/$Windowmanager/exe" | awk '{print $11}'`     # if yes, then get /path/executable
        else                                                                       # otherwise, try unsecure way over name
          Windowmanager=`wmctrl -m | grep "Name" | awk '{print $2}' | tr '[:upper:]' '[:lower:]'`              #| awk '{print $1}'`
        fi
      fi
      #
      case $(basename $Windowmanager | awk '{print $1}') in  # check some wm that need to be configured 
        cinnamon|cinnamon-session) Windowmanager="cinnamon-session -f";;
        compiz) # set minmal config to have useable window decoration and can move windows
          if [ ! -e "$HOME/.config/compiz-1/compizconfig/Default.ini" ] ; then
            mkdir -p "$HOME/.config/compiz-1/compizconfig"
            echo "[core]
s0_active_plugins = core;composite;opengl;decor;resize;move;
" > "$HOME/.config/compiz-1/compizconfig/Default.ini"
          fi  ;;
        enlightenment|e17|e16|e19|e20) Windowmanager="enlightenment_start" ;;
        gnome|gnome-shell|gnome-session) # crashes without option '--sm-disable' on ubuntu 14.04
          Windowmanager="gnome-shell --sm-disable" ;;
        matchbox) Windowmanager="matchbox-window-manager"  ;;
        mate|mate-session) Windowmanager="mate-session -f" ;;
        mate-wm) Windowmanager="marco --sm-disable"  ;;
        openbox) Windowmanager="openbox --sm-disable" ;;
      esac
      #
      [ "$Windowmanager" ] && [ -z "$(command -v $Windowmanager)" ] && error "No executeable window manager $Windowmanager found. 
  Have a look at 'x11docker --help' for a list of reommended window managers.
  If you want to run without a windowmanager from host, use option --desktop" 
    ;;
    esac
  ;;
  esac
}

{ #### part: check X11dockermode run/exe/xonly
  Timetosaygoodbye="while [ ! -e $Cshare/timetosaygoodbye ] && [ ! -e /$Sharefolder/timetosaygoodbye ] ; do sleep 1 ; done"
  [ -z "$Imagename" ] && X11dockermode="xonly" 
  [ "$X11dockermode" = "run" ] && {
    case $Xserver in
      Xpra-image|Xorg-image|Xdummy-image)
        [ -z "$Imagecommand" ] && X11dockermode="xonly" 
      ;;
    esac
  }
  [ "$X11dockermode" = "exe" ] && {
    case $Xserver in
      Xpra-image|Xorg-image|Xdummy-image) 
        Hostexe="$Imagecommand"
        Imagecommand="$Timetosaygoodbye"
        X11dockermode="run" 
      ;;
      Xpra|Xephyr|Xorg|Hostdisplay|Xdummy)
        Hostexe="$Imagename $Imagecommand"
        Imagename=""
        Imagecommand=""
      ;;
    esac
    [ -z "$Hostexe" ] && error "No host executable defined"
    [ -z "$(command -v $Hostexe)" ] && error "$Hostexe seems to be not executeable"
  }
  [ "$X11dockermode" = "xonly" ] && case $Xserver in
    Xpra-image|Xorg-image|Xdummy-image)
      [ -z "$Imagename" ] && error "Please specify an image to run with $Xserver"
      Imagecommand="$Timetosaygoodbye"
      X11dockermode="run"
    ;;
    Xpra|Xephyr|Xorg|Hostdisplay|Xdummy)
      case $Windowmanager in
        "") Hostexe=$Timetosaygoodbye ;;
        *)  Hostexe="$Windowmanager" ; Windowmanager="" ;;
      esac
      Imagename=""
      Imagecommand=""
      X11dockermode="exe"
    ;;
  esac
}

{ #### part: option '-c, --clipboard' create shareclipboard.bash
  #
  # use xclip to share text clipboard content between X servers.
  # xpra has its own clipboard management including image transfer
  #
  [ "$Shareclipboard" = "yes" ] && case $Xserver in
  Xpra|Xpra-image|Xorg-image)
    case $Shareclipboard in                        # option '-c, --clipboard'
      yes) Xpraoptions="$Xpraoptions --clipboard"   ;;
      no)  Xpraoptions="$Xpraoptions --no-clipboard" ;; 
    esac
  ;;
  Xephyr|Xorg|Xdummy-image|Xdummy)
    if [ -z "$(command -v 'xclip')" ] ; then
      warning "Cannot share clipboard. Need package 'xclip' to be
  installed. Try installing xclip with command: 'apt-get install xclip'"
      Shareclipboard="no"
    else 
      echo "#! /bin/bash
# share clipboard between two X servers
while true ; do
    # read content of clipboard of first X server
    XAUTHORITY=$Hostxauthority
    D1CLIP=\"\$(xclip -selection clipboard -o -display $Hostdisplay)\"
    # check if clipboard of first X server has changed; if yes, send new content to second X server
    if [ ! \"\$CLIP\" = \"\$D1CLIP\" ] ; then
        CLIP=\"\$D1CLIP\"
        xclip -selection clipboard -o -display $Hostdisplay | XAUTHORITY=$Xclientcookie xclip -selection clipboard -i -display $Newdisplay
    fi
    
    # read content of clipboard of second X server
    XAUTHORITY=$Xclientcookie
    D2CLIP=\"\$(xclip -selection clipboard -o -display $Newdisplay)\"
    # check if clipboard of second X server has changed; if yes, send new content to first X server
    if [ ! \"\$CLIP\" = \"\$D2CLIP\" ] ; then
        CLIP=\"\$D2CLIP\"
        xclip -selection clipboard -o -display $Newdisplay | XAUTHORITY=$Hostxauthority xclip -selection clipboard -i -display $Hostdisplay
    fi
    
    # avoid empty string error
    if [ -z \"\$CLIP\" ] ; then CLIP=' ' ; fi
    # sleep a bit to avoid high cpu usage
    sleep 0.3
done
" > $Shareclipboardscript
    fi
  ;;
  esac
}

{ #### part: create command to start X server
  echo '# This xorg configuration file is forked and changed from xpra to start a dummy X11 server.
# For original and details, please see: https://xpra.org/Xdummy.html
Section "ServerFlags"
  Option "DontVTSwitch" "true"
  Option "AllowMouseOpenFail" "true"
  Option "PciForceNone" "true"
  Option "AutoEnableDevices" "false"
  Option "AutoAddDevices" "false"
EndSection
Section "Device"
  Identifier "dummy_videocard"
  Driver "dummy"
  DacSpeed 600
  Option "ConstantDPI" "true"
  VideoRam 256000
EndSection
Section "Monitor"
  Identifier "dummy_monitor"
  HorizSync   1.0 - 2000.0
  VertRefresh 1.0 - 200.0
  Modeline "8192x4096" 193.35 8192 8224 8952 8984 4096 4196 4200 4301
EndSection
Section "Screen"
  Identifier "dummy_screen"
  Device "dummy_videocard"
  Monitor "dummy_monitor"
  DefaultDepth 24
  SubSection "Display"
    Viewport 0 0
    Depth 24
    Modes "8192x4096"
    Virtual 8192 4096
  EndSubSection
EndSection
Section "ServerLayout"
  Identifier   "dummy_layout"
  Screen       "dummy_screen"
EndSection
  ' > $Cachefolder/xorg.conf
  Xserveroptions=""
  Xserveroptions="$Xserveroptions +extension Composite +extension RANDR +extension RENDER +extension GLX +extension XVideo +extension DOUBLE-BUFFER +iglx +extension XINERAMA"
  Xserveroptions="$Xserveroptions +extension X-Resource +extension SECURITY +extension DAMAGE"
  Xserveroptions="$Xserveroptions -retro"                       # retro look with grey background and X mouse cursor
  case $Shareipc in
    "yes") Xserveroptions="$Xserveroptions +extension MIT-SHM" ; Xprashm="" ;;               # only usefull if sharing host IPC
    "no")  Xserveroptions="$Xserveroptions -extension MIT-SHM" ; Xprashm="XPRA_XSHM=0" ;;    # explicitly disable MIT-SHM to avoid rendering glitches, often enabled in X by default
  esac
  case $Xconnection in
    tcp)  # option --tcp
      case $Xserver in
        Xpra|Xephyr|Xorg|Xdummy)
          Xversion=$(Xorg -version 2>&1 | grep xorg-server | cut -d ' ' -f2 | cut -d: -f2)
          verlt $Xversion "1.17.0" || Xserveroptions="$Xserveroptions -listen tcp" ;;   # since X 1.17.0 must use -listen. Older versions don't know -listen
      esac
    ;;
    xsocket) Xserveroptions="$Xserveroptions -nolisten tcp" ;;        # disable tcp if connection with shared X socket is used (default)
  esac
  [ "$Xauthentication" = "yes" ] && {
    case $Xserver in
      Xorg|Xpra|Xephyr|Xdummy)            Xserveroptions="$Xserveroptions -auth $Xservercookie" ;;
      Xpra-image|Xorg-image|Xdummy-image) Xserveroptions="$Xserveroptions -auth $Cshare/Xservercookie" ;;
      Hostdisplay) ;;
    esac
  }
  case $Xserver in
    Xorg) 
      Xserveroptions="$Xserveroptions +extension XFree86-DRI +extension XFree86-DGA +extension XFree86-VidModeExtension"
      Xserveroptions="$Xserveroptions -verbose"                  # make X verbose
      Xserveroptions="$Xserveroptions -extension XTEST"          # explicitly disable XTEST for security reasons
      #Xserveroptions="$Xserveroptions +extension DRI +extension DRI2 +extension DRI3 +extension SGI-GLX +extension SHAPE" # seems not to be enableby at runtime
      Xcommand="$(command -v X) $Newdisplay $Newxvt $Xserveroptions"
    ;;
    Xpra|Xpra-image|Xorg-image|Xdummy-image|Xdummy) # To use xpra, Xdummy will run first. xpra server attaches to it later.
      Xserveroptions="$Xserveroptions +extension XTEST"          # SECURITY Without XTEST keyboard and mouse are not recognized by xpra
      Xserveroptions="$Xserveroptions +extension XFree86-DRI +extension XFree86-DGA +extension XFree86-VidModeExtension"
      Xserveroptions="$Xserveroptions -verbose"                  # make X verbose
      #Xcommand="$(command -v Xvfb) $Newdisplay $Xserveroptions -screen 0 ${Xaxis}x${Yaxis}x24+32"       # command to run Xvfb for xpra (needs package xvfb)
      #Xcommand="$(command -v Xorg) $Newdisplay $Newxvt -config /etc/xpra/xorg.conf $Xserveroptions"             # command to run Xdummy for xpra
      case $Xserver in
        Xpra|Xdummy) Xcommand="/usr/bin/Xorg $Newdisplay $Newxvt -config $Cachefolder/xorg.conf $Xserveroptions"
          if [ -e "/etc/xpra/xorg.conf" ] ; then cp /etc/xpra/xorg.conf $Cachefolder/xorg.conf
          else cp $Cachefolder/../xorg.conf $Cachefolder/xorg.conf ; fi 
        ;;
        Xpra-image|Xorg-image|Xdummy-image)
          Xcommand="/usr/bin/Xorg $Newdisplay $Newxvt -config $Cshare/xorg.conf $Xserveroptions"
          if [ -e "/etc/xpra/xorg.conf" ] ; then cp /etc/xpra/xorg.conf $Sharefolder/xorg.conf
          else cp $Cachefolder/../xorg.conf $Sharefolder/xorg.conf ; fi
        ;;
      esac  
      Xpraoptions="$Xpraoptions -z0 --no-speaker --no-pulseaudio"
    ;;
    Xephyr)
      Xserveroptions="$Xserveroptions -extension XTEST"           # explicitly disable XTEST for security reasons
      case $Xephyrfullscreen in    # option '--fullscreen'
        yes) Xephyroptions="$Xephyroptions -fullscreen" ;;
        no)  Xephyroptions="$Xephyroptions $Xephyrsize" ;;
      esac
      [ "$Xephyrresize" = "yes" ] && Xephyroptions="$Xephyroptions -resizeable"  # option '--resizeable'
      [ "$Xephyrglamor" = "yes" ] && Xephyroptions="$Xephyroptions -glamor"      # option '--resizeable'
      #Xephyroptions="$Xephyroptions -title ${Newdisplay}_${Imagename}_$(echo $Imagecommand$Hostexe | cut -d " " -f1)"    # set window title 
      Xcommand="$(command -v Xephyr) $Newdisplay $Xserveroptions $Xephyroptions"
    ;;
    Hostdisplay) # host display :0 is already running and cannot be reconfigured
    ;;
  esac
  
  Newxenv="DISPLAY=$Usedisplay"
  Dockerenv="--env='DISPLAY=$Usedisplay'"
  case $Xauthentication in
    yes) Newxenv="$Newxenv XAUTHORITY=$Xclientcookie" 
      Dockerenv="$Dockerenv --env='XAUTHORITY=$Cshare/Xclientcookie' --volume=$Xclientcookie:$Cshare/Xclientcookie:ro" 
      ;;
    no)  Newxenv="$Newxenv XAUTHORITY=''"
      ;;
  esac
  case $Xconnection in
    tcp) ;;
    xsocket)  Newxenv="$Newxenv XSOCKET=$Newxsocket"
      Dockerenv="$Dockerenv --volume=$Newxsocket:$Newxsocket:ro" 
    ;;
  esac
  case $Xserver in
    Xpra|Xpra-image|Xorg-image) Newxenv="$Newxenv $Xprashm" ;;
  esac
  #   option '--env': show display infos on stdout
  [ "$Showdisplayenvironment" = "yes" ] && echo $Newxenv
  [ "$Showdockerenvironment" = "yes" ] && echo $Dockerenv
}

{ #### part: create command to run docker
  case $X11dockermode in
    exe)  Dockercommand="# dontrundocker"  ;;
    run) 
      Containername="x11docker_X${Newdisplaynumber}_$(mcookie | cut -c -6)"
      Dockercommand='docker run'
      Dockercommand="$Dockercommand --cidfile=$Cidfile"             # write container id in file $Cidfile
      Dockercommand="$Dockercommand --name=$Containername"          # give container a name that can be found by --orphaned
      Dockercommand="$Dockercommand -v $Sharefolder:$Cshare"
      
      case $Xserver in
        Xpra-image|Xorg-image|Xdummy-image) # create script to run X server in docker and create Cookies
          Dockercommand="$Dockercommand -v $Socketfolder:/tmp/.X11-unix:rw"
          echo "#! /bin/bash
$(declare -f no_xhost)
$(declare -f waitforfilecreation)
$(declare -f waitforxpraserver)
$(declare -f verlte)
$(declare -f verlt)
Xcommand='$Xcommand'
Xversion=\$(Xorg -version 2>&1 | grep xorg-server | cut -d ' ' -f2 | cut -d: -f2)
verlt \$Xversion '1.17.0' || Xcommand=\"\$Xcommand -listen tcp\" # since X 1.17.0 must use -listen. Older versions don't know -listen
\$Xcommand & echo \$Xcommand
echo 'Waiting for X to be ready ...'
waitforfilecreation /tmp/.X11-unix/X$Newdisplaynumber
cd /x11docker
" > $Sharefolder/Xdummy.sh
          [ "$Xauthentication" = "yes" ] && echo "#
# create new XAUTHORITY cookie, preserve possible cookie from host (--virtualgl)
[ -e Xclientcookie ] || :> Xclientcookie 
cp Xclientcookie Xclientcookie-n                       # xauth cannot lock docker shared files, use copy instead
export XAUTHORITY=$Cshare/Xclientcookie-n
xauth -v generate $Newdisplay . $Trusted                ### SECURITY Does not work with untrusted, not checked why
[ \"$Xconnection\" = \"tcp\" ] && {
  # xauth -v generate $Tcpdisplay . $Trusted            ### BUG: Does not work. need IP from /etc/hosts instead
  xauth -v generate 127.0.0.1$Newdisplay . $Trusted
  export DISPLAY=127.0.0.1$Newdisplay
}
# create prepared cookie with localhost identification disabled by ffff, needed for access from host. ffff means 'familiy wild'
COOKIE=\$(xauth nlist $Newdisplay | sed -e 's/^..../ffff/' )
echo \$COOKIE | xauth -v -f \$XAUTHORITY nmerge -
cp Xclientcookie-n Xclientcookie
cp Xclientcookie Xservercookie
chmod 666 Xclientcookie Xclientcookie-n Xservercookie   # avoid permission issues in shared folder
export XAUTHORITY=$Cshare/Xclientcookie
" >> $Sharefolder/Xdummy.sh
            #    if [ -n "$Xhost" ] ; then echo "xhost $Xhost # SECURITY risk! Testing purposes only!" >> $Sharefolder/Xdummy.sh ; fi
          case $Xserver in
            Xpra-image) echo "#
[ -n \"\$(xpra --version | grep v1. )\" ] && Xprabind='--bind=$Cshare/socket'
$Xprashm xpra start $Newdisplay --use-display --socket-dir=$Cshare/socket \$Xprabind --no-daemon --no-notifications --no-mdns --webcam=no $Xpraoptions  > $Cshare/xpraserver.log 2>&1 &
waitforxpraserver $Cshare/xpraserver.log
chmod 666 $Cshare/xpraserver.log
" >>  $Sharefolder/Xdummy.sh 
                Xpraserverlogfile="$Sharefolder/xpraserver.log"
            ;;
          esac
          echo "#
chmod 0666 \$(find $Cshare/socket/ -mindepth 1 )
no_xhost
xhost $Xhost
cd \$HOME
$Imagecommand
#rm -R  \$(find $Cshare/socket/ -mindepth 1 | grep -v $(basename $Hostxsocket) )
rm -R  \$(find $Cshare/socket/ -mindepth 1 )
" >>  $Sharefolder/Xdummy.sh  
          Imagecommand="/bin/bash $Cshare/Xdummy.sh"
          Sharenewxsocket="no"  # is done with softlink in xinitrc
        ;;
        Hostdisplay)  # Enable or disable MIT-SHM and Opengl in clients as good as possible to avoid rendering glitches
          case $Shareipc in
            "yes") Dockercommand="$Dockercommand -e QT_GRAPHICSSYSTEM=opengl"  ;;  # raster, native or opengl. Setting it to opengl because plasma automatically shrinks down to "render" if gpu is missing, but does not "upgrade" to "opengl" if it is available.
            "no")
              Dockercommand="$Dockercommand -e QT_X11_NO_MITSHM=1"          # disables usage of MIT-SHM in QT
              Dockercommand="$Dockercommand -e GDK_RENDERING=image"         # disables GTK OpenGL&MIT-SHM (yes, it's written GDK instead of GTK)
              # disable MIT-SHM or OpenGL usage (seems not to work)
              #Dockercommand="$Dockercommand -e _X11_NO_MITSHM=1"
              #Dockercommand="$Dockercommand -e _MITSHM=0"
            ;;
          esac 
        ;;
        Xephyr|Xpra|Xorg|Xdummy)
        ;;
      esac
      
      [ "$Xauthentication" = "yes" ] && { # XAUTHORITY: share new X authentication cookie file
        Dockercommand="$Dockercommand -v $Xclientcookie:$Cshare/Xclientcookie:rw -e XAUTHORITY=$Cshare/Xclientcookie"
      }
      # DISPLAY
      case $Xconnection in
        xsocket)  # default
          Dockercommand="$Dockercommand -e DISPLAY=$Newdisplay"
          [ "$Sharenewxsocket" = "no" ] || Sharenewxsocket="yes"  ;;
        tcp)      # with developer option --tcp only (not implemented for --xpra-image and --xorg-image)
          Dockercommand="$Dockercommand -e DISPLAY=$Tcpdisplay"  ;;
      esac

      if [ -n "$Gpu" ] ; then  ## options '--gpu', '--virtualgl': share graphics adapter device files ### SECURITY slightly degrades container isolation
        while read -r FILE ; do
        Dockercommand="$Dockercommand --device=$FILE:$FILE:rw"
        done < <(find /dev/dri/* -maxdepth 0 -type c)
      fi  
      #Dockercommand="$Dockercommand -e LIBGL_ALWAYS_INDIRECT=1"  ### test: force indirect rendering
      #  
      # share X socket from $Newdisplay ### does not break isolation from display :0 if NOT /tmp/.X11-unix/X0
      [ "$Sharenewxsocket" = "yes" ] && Dockercommand="$Dockercommand -v $Newxsocket:$Newxsocket:ro"
      #
      ## hardware acceleration options --gpu and --virtualgl
      case $Gpu in
        "immediate") ;; ## option '--gpu': immediate hardware acceleration for options --Xorg and --hostdisplay
        "virtualgl")    ## option '--virtualgl': mediate hardware OpenGL acceleration with VirtualGL
          case $Xserver in
            Xpra|Xephyr|Xpra-image|Xorg-image|Xdummy-image) # share X socket from :0 so virtualgl can use it. ### SECURITY issue, breaks container isolation from display :0
              Dockercommand="$Dockercommand -v $Hostxsocket:$Hostxsocket:ro"
              #ln -s $Hostxsocket $Socketfolder
              Dockercommand="$Dockercommand -e VGL_DISPLAY=$Hostdisplay"  ;;
            Xorg|Hostdisplay)
              Sharenewxsocket="yes"
              Dockercommand="$Dockercommand -e VGL_DISPLAY=$Newdisplay"  ;;
          esac
          while read -r Line ; do
            Dockercommand="$Dockercommand -e $Line"                                                # share environment variables created by vglrun
          done < <(comm -1 -3 <(env | sort) <(vglrun +v -c 0 env | grep -v '^\[' | sort))
          Dockercommand="$Dockercommand -v /usr/lib/libdlfaker.so:/usr/lib/libdlfaker.so:ro -v /usr/lib/libvglfaker.so:/usr/lib/libvglfaker.so:ro" # share VirtualGL libs
          #Dockercommand="$Dockercommand -e VGL_LOGO=1"                                            # shows VGL logo in rendered images
        ;;
      esac

      ## option '-p, --ps': preserve container yes/no. default:no
      [ "$Preservecontainer" = "no" ] && Dockercommand="$Dockercommand --rm"

      ## option '--home': share folder ~/.local/share/x11docker/Imagename with created container as its home directory
      if [ "$Adduserhome" = "yes" ] ; then
        # define path to shared folder and remove '/' from image name
        Adduserhomefolder=$HOME/.local/share/x11docker/`echo $Imagename | tr / - | tr : - `
        if [ ! -e "$Adduserhomefolder" ] ; then
          mkdir -p $Adduserhomefolder
          # create symbolic link in $HOME
          if [ ! -e $HOME/x11docker ] ; then ln -s $HOME/.local/share/x11docker $HOME/x11docker ; fi
        fi
        Dockercommand="$Dockercommand -v $Adduserhomefolder:/home/$Benutzer"
      fi
     
      if [ "$Addhostuser" = "yes" ] ; then  ## options '-u, --hostuser' '-U, --sudouser': create container user similar to host user
        #
        # CMD in image will be disabled by createuser script. If no iage command is defined on CLI, get CMD from image
        # ('docker inspect' needs root permissions. That's not nice. Have to ask for password)
        [ -z "$Imagecommand" ] && askforimagecommand
        #
        # create script createuser. It will also start the image with given (or extracted) command
        { echo "#! /bin/bash"
          # create user
          echo "if [ -z \"\$(id -u `id -u`)\" ] ; then"
          echo "  Benutzer=$Benutzer"
          echo "  addgroup --force-badname --gid `id -g $Benutzer` \$Benutzer"
          echo "  useradd -l --password '' --uid `id -u` --gid `id -g` --create-home --home-dir /home/\$Benutzer \$Benutzer"
          echo "  chown \$Benutzer:\$Benutzer /home/\$Benutzer"
          echo "else" 
          echo "  Benutzer=\$(id -nu `id -u`)"
          echo "fi"
          echo "export HOME=/home/\$Benutzer"
          echo "cd \$HOME"
      
          # option '--sudouser': add sudo permissions without password
          if [ "$Addsudouser" = "yes" ] ; then
            echo 'touch /etc/sudoers'
            echo 'echo "%sudo ALL=(ALL) NOPASSWD:ALL"   >> /etc/sudoers'
            echo "adduser \$Benutzer sudo"
          fi
      
          # option '--virtualgl': if VirtualGL server is configured for authorisized access, one has to be member of vglusers. ### FIXME: Maybe not needed?
          if [ "$Gpu" = "virtualgl" ] ; then      
            if [ -n "$(cat /etc/group | grep vglusers:)" ] ; then
              echo "addgroup --gid $(cat /etc/group | grep vglusers: | cut -d: -f3) vglusers"
              echo "adduser \$Benutzer vglusers"
            fi
          fi
          
           # option '--gpu': add user to group video
          echo "adduser \$Benutzer video" # add user to group video, needed for option --gpu
          [ "$Alsa" = "yes" ] && echo "adduser \$Benutzer audio"  # add user to group audio, experimental
          
          case $Xserver in
            Xpra-image)
              echo "mkdir -p /tmp/.X11-unix"
              echo "chmod 1777 /tmp/.X11-unix"  ;;
          esac
          
          # run image command as user:
          echo "su \$Benutzer -c '$Imagecommand'"
        } > $Createuserscript
        #
        # include created script in container
        Dockercommand="$Dockercommand -v $Createuserscript:$Cshare/createuser"
        # use created script as command (CMD) to run image
        Imagecommand="/bin/bash $Cshare/createuser"
      fi
  
      ## option '--pulseaudio': provide pulseaudio server
      [ "$Pulseaudio" = "yes" ] && Dockercommand="$Dockercommand -e PULSE_SERVER=tcp:$Dockerip:$Pulseaudiotcpport"
      
      ### SECURITY leak: option --ipc speeds up --gpu and avoids rendering glitches with --hostdisplay
      [ "$Shareipc"   = "yes" ] && Dockercommand="$Dockercommand --ipc=host"
  
      ### test for alsa support, not working yet
      if [ "$Alsa" = "yes" ] ; then
        while read -r FILE ; do
          Dockercommand="$Dockercommand --device=$FILE:$FILE:rw"
        done < <(find /dev/snd/* -maxdepth 0 -type c)
        #Dockercommand="$Dockercommand --lxc-conf=\"lxc.cgroup.devices.allow = c 116:* rwm\""
        Dockercommand="$Dockercommand -v /usr/share/alsa:/usr/share/alsa:ro"
      fi
    ;;
  esac

  # add custom docker arguments, imagename and imagecommand
  Dockercommand="$Dockercommand $Dockeroptions"
  case $Imagecommand in
    "") Dockercommand="$Dockercommand -- $Imagename" ;;
    *)  # store imagecommand in shared bash script to avoid issues with imagecommands containing && ; > and the like 
      echo "#! /bin/bash
cd \$HOME
$Imagecommand &
Imagecommandpid=\$!
#Imagecommandbasename=$(basename "$Imagecommand" | cut -d' ' -f1)
#while [ ! -e $Cshare/timetosaygoodbye ] && [ \"\$(ps | grep \$Imagecommandpid | grep \$Imagecommandbasename )\" ] ; do sleep 1 ; done   # does not work with chain & && commands
while [ ! -e $Cshare/timetosaygoodbye ] && [ \"\$(ps | grep \$Imagecommandpid)\" ] ; do sleep 1 ; done 
touch $Cshare/timetosaygoodbye && chmod 666 $Cshare/timetosaygoodbye
" > $Imagecommandscript
      Dockercommand="$Dockercommand -v $Imagecommandscript:$Cshare/x11docker_CMD"
      Dockercommand="$Dockercommand -- $Imagename /bin/bash $Cshare/x11docker_CMD"
    ;;
  esac
}

{ #### part: create xinitrc
  echo "#! /bin/bash"

  echo "Bgpidfile=$Bgpidfile"
  declare -f storepid  # echoes storepid(), including it this way in xinitrc
  declare -f waitforfilecreation
  declare -f waitforxpraserver
  declare -f no_xhost 

  echo "export XPRA_OPENGL_DOUBLE_BUFFERED=1 # avoid xpra bug 1469"
  
  echo "set -v  # make bash verbose"
  echo "# set X variables to host display"
  echo "export DISPLAY=$Hostdisplay"
  echo "export XAUTHORITY=$Hostxauthority"
  
  if [ "$Noxhost" = "yes" ] ; then  
    echo "## option --no-xhost: disable any access to host display granted by xhost"
    echo "no_xhost"
  fi  
  if [ -n "$Xhost" ] ; then 
    echo "### developer option --xhost ### SECURITY issue, testing purposes only. Any client can access display $Hostdisplay"
    echo "xhost $Xhost"
  fi
  
  if [ "$Pulseaudio" = "yes" ] ; then
    echo "# option '--pulseaudio': enable pulseaudio sound over tcp"
    echo "# load pulseaudio tcp module, authenticated to docker ip on specified port"
    echo 'Pulseaudiomoduleid=$(pactl load-module module-native-protocol-tcp port='$Pulseaudiotcpport' auth-ip-acl='$Dockeriprange')'
  fi
  
  echo "# create empty Xclientcookie file"
  echo ':> '$Xclientcookie
  # cases to give docker access to display :0
  if [ "$Xserver" = "Hostdisplay" ] || [ -n "$Gpu" ] && [ "$Xserver" != "Xorg" ] ; then :      ## option '--virtualgl' or --hostdisplay
    echo "# extracting access to X on display :0, degrading container isolation"
    echo "# setting cookie validity to 'family wild' with ffff"
    echo "xauth -f $Xclientcookie generate $Hostdisplay . $Trusted"
    echo "Cookie=\$(xauth -f $Xclientcookie nlist $Hostdisplay | sed -e 's/^..../ffff/' )" 
    echo "echo \$Cookie | xauth -f $Xclientcookie nmerge -"
  fi 
  [ "$Xauthentication" = "yes" ] && {
    case $Xserver in
    Xorg|Xpra|Xephyr|Xdummy)
      echo "# set X variables to new display"
      echo "export $Newxenv"
      echo "# create new XAUTHORITY cookies"
      echo "xauth generate $Newdisplay . $Trusted"
      [ "$Xconnection" = "tcp" ] && echo "xauth generate $Tcpdisplay . $Trusted"
      #echo 'COOKIE=$(mcookie)'
      #echo "xauth add $Newdisplay . "'$COOKIE'       # creates trusted cookies, does not need X extension Securtity
      #echo "xauth add $Tcpdisplay . "'$COOKIE'
      echo "cp $Xclientcookie $Xservercookie"
      if [ "$Sharenewxsocket" = "yes" ] ; then 
        echo "# create prepared cookie with localhost identification disabled by ffff, needed if X socket is shared. ffff means 'familiy wild'"
        echo 'COOKIE=$(xauth nlist '$Newdisplay" | sed -e 's/^..../ffff/' )"   
        echo 'echo $COOKIE'"| xauth -f $Xclientcookie nmerge -"
      fi
      echo "xauth list"
    ;;
    esac
  }
  #
  if [ "$Shareclipboard" = "yes" ] ; then
    case $Xserver in
      Xorg|Xephyr|Xdummy-image|Xdummy)
        echo "# option '-c, --clipboard': Run clipboard script for Xorg/Xephyr "
        echo "# (text copy only) (xpra has its own clipboard managment including images)"
        echo "bash $Shareclipboardscript & storepid \$! bash"
      ;;
    esac
  fi
  #
  if [ "$Gpu" = "virtualgl" ] ; then 
    echo "# Make VirtualGL working in new Display for host applications. rarely needed, but possible. disabled for xpra because of connection problems"
    case $Xserver in
      Xpra|Xephyr|Hostdisplay|Xdummy)  echo "export VGL_DISPLAY=$Hostdisplay"  ;;
      Xorg) echo "export VGL_DISPLAY=$Newdisplay"   ;;
      Xpra) ;;
    esac
    case $Xserver in
      Xephyr|Xorg|Hostdisplay|Xpra|Xdummy)
        echo "# share environment variables created by vglrun"
        while read -r Line ; do
          echo "export $Line"
        done < <(comm -1 -3 <(env | sort) <(vglrun +v -c 0 env | grep -v '^\[' | sort))
        #echo "export VGL_LOGO=1                                            # shows VGL logo in rendered images"
      ;;
    esac
  fi
  #
  case $Xserver in
    Xpra) 
      echo "## start xpra server on display $Newdisplay created by Xdummy"
      echo "[ -n \"\$(xpra --version | grep v1. )\" ] && Xprabind='--bind=$Cshare/socket'"
      echo "export $Newxenv"
      echo "xpra start $Newdisplay --use-display --socket-dir=$Cachefolder \$Xprabind --no-daemon $Xpraoptions > $Xpraserverlogfile 2>&1 &"
      echo 'storepid $! xpra'
      echo "waitforxpraserver $Xpraserverlogfile"
      echo "# start xpra viewer on host display"
      echo "export $Hostxenv"
      echo "xpra attach socket:\$(find $Cachefolder | grep -e -$Newdisplaynumber ) --compress=0  &"
    ;;
    Xephyr)
      echo "# set keyboard layout in Xephyr to same as on host"
      echo "export $Newxenv"
      echo "echo '$(setxkbmap -display $Hostdisplay -print)' | xkbcomp - $Newdisplay"  
    ;;
  esac
  #
  case $Xserver in
    Xorg|Xpra|Xephyr|Xdummy)
      echo "# disable any possible access to new X server granted by xhost"
      echo "export $Newxenv"
      echo "no_xhost"
      if [ -n "$Xhost" ] ; then 
        echo "### developer option --xhost: any client can access $Newdisplay, security leak"
        echo "xhost $Xhost"
      fi
    ;;
  esac
  #
  # choose apps to run and wait for them to exit
  case $X11dockermode in
    run) # includes --exe and --xonly for --*-image-X servers 
      case $Xserver in
        Xdummy|Xdummy-image|Xpra-image|Xorg-image) echo "export $Hostxenv" ;;
        Xpra|Xephyr|Xorg|Hostdisplay)              echo "export $Newxenv"  ;;
      esac
      echo "# password for docker will be prompted in xterm"
      echo "xterm -l -lf $Xtermlogfile -title x11docker -e '/bin/bash $Xtermrc'"
      echo "if [ -e '$Dockerpidfile' ] ; then"
      echo '  Dockerpid=`cat '$Dockerpidfile'` && storepid $Dockerpid docker'
      case $Xserver in
        Xpra-image)
          echo "  ln -s $Socketfolder/X$Newdisplaynumber /tmp/.X11-unix/X$Newdisplaynumber # Create soft link for unix socket thus making it available for host applications"
          echo "  waitforxpraserver $Xpraserverlogfile"
          echo "  # start xpra viewer on host display"
          echo '  xpra attach socket:$(find '$Socketfolder' -mindepth 1 | grep -e -'$Newdisplaynumber') --compress=0 --no-notifications '$( [ -n "$Hostexe" ] && echo "&" )
        ;;
        Xorg-image)
          echo "  ln -s $Socketfolder/X$Newdisplaynumber /tmp/.X11-unix/X$Newdisplaynumber # Create soft link for unix socket"
          echo "  export $Newxenv"
          echo "  ## start xpra server on host attaching Xorg/Xdummy display $Newdisplay in container"
          echo "  xpra start $Newdisplay --use-display --no-daemon $Xpraoptions > $Xpraserverlogfile 2>&1 &"
          echo '  storepid $! xpra'
          echo "  waitforxpraserver $Xpraserverlogfile"
          echo "  no_xhost"
          [ -z "$Xhost" ] || echo "  DISPLAY=$Newdisplay XAUTHORITY=$Xclientcookie xhost $Xhost"
          echo '  # start xpra viewer on host display'
          echo "  export $Hostxenv"
          echo '  xpra attach '$Newdisplay' --compress=0 --no-notifications '$( [ -n "$Hostexe" ] && echo "&" )
        ;;
        Xdummy-image)
          echo "  ln -s $Socketfolder/X$Newdisplaynumber /tmp/.X11-unix/X$Newdisplaynumber # Create soft link for unix socket thus making it available for host applications"
        ;;
      esac
      echo "  export $Newxenv"
      [ -n "$Windowmanager" ] && {
        echo "  # start host window manager on new display"
        echo "  $Windowmanager &"
        echo "  storepid \$! $(echo $Windowmanager | cut -d " " -f1)"
      }
      [ -n "$Hostexe" ] && {
        echo '  # run host application on new X server'
        echo "  $Hostexe & Hostexepid=\$!"
        #echo "  while [ ! -e $Sharefolder/timetosaygoodbye ] && [ \"\$(ps | grep \$Hostexepid | grep $(basename $Hostexe | cut -d' ' -f1) )\" ] ; do sleep 1 ; done"
        echo "  while [ ! -e $Sharefolder/timetosaygoodbye ] && [ \"\$(ps | grep \$Hostexepid )\" ] ; do sleep 1 ; done"
        echo "  touch $Sharefolder/timetosaygoodbye"
      }
      echo '  # wait for docker until it terminates. bash builtin wait does not work in this case'
      echo '  while [ -n "$(pgrep docker | grep $Dockerpid)" ] ; do sleep 1 ; done'
      echo 'fi'
      case $Xserver in
        Xpra-image|Xorg-image|Xdummy-image) echo "rm /tmp/.X11-unix/X$Newdisplaynumber" ;;
      esac
    ;;
    exe) # includes --xonly for host X servers
      echo "export $Newxenv"
      [ -n "$Windowmanager" ] && {
        echo "# start host window manager on new display"
        echo "$Windowmanager & storepid \$! $(basename $Windowmanager | cut -d " " -f1)"
      }
      echo "# run host application"
      echo "$Hostexe & Hostexepid=\$!"
      echo "while [ ! -e $Sharefolder/timetosaygoodbye ] && [ \"\$(ps | grep \$Hostexepid )\" ] ; do sleep 1 ; done"
      echo "touch $Sharefolder/timetosaygoodbye"
    ;;
  esac

  # option '--pulseaudio'. remove custom tcp module
  #if [ "$Pulseaudio" = "yes" ] ; then 
  #  echo 'pactl unload-module $Pulseaudiomoduleid'   ### FIXME: disabled because host pulseaudio daemon stops after this for unknown reasons. Bug in pulseaudio?
  #fi 
  echo "[ -e "$HOME/.:$Newdisplaynumber-fakexinerama" ] && rm $HOME/.:$Newdisplaynumber-fakexinerama   # clean up behind xpra" 
  if [ -n "$Xhost" ] ; then 
    echo "# developer option --xhost: reenabling xhost control on exit"
    echo "$Hostxenv xhost -"
  fi 
} > $Xinitrc

{ #### part: create xtermrc (used by xinitrc to get password and run docker)
  if [ "$X11dockermode" = "run" ] || [ "$X11dockermode" = "runexe" ] ; then
    { echo "#! /bin/bash"
      if [ "$Windowmanager" = "" ] && [ "$Xserver" != "Xpra" ] && [ "$Getroot" != "bash -c" ] ; then
        echo "echo 'Please move mouse cursor into terminal area to get keyboard focus.'"
      fi
      echo "
echo 'Created docker command:'
echo ''
echo $Dockercommand
echo ''"
      [ "$Getroot" = "bash -c" ] || echo "echo 'Please type in your password to run docker on display $Newdisplay:'"
      echo "$Getroot 'nohup $Dockercommand > $Dockerlogfile 2>&1 & echo "'$!'" > $Dockerpidfile'"
      echo "sleep 2" # time to read possible error message
    } > $Xtermrc
  fi   
}

{ #### part:  options '-v, --verbose'
    verbose "Found free display $Newdisplay"
    verbose "As X server will be used: $Xserver"
    verbose "Environment variables: 
$Newxenv"
    verbose "Image name: $Imagename"
    verbose "Image command: $Imagecommand"
    verbose "Current cache folder: $Cachefolder"
    verbose "IP of docker interface: $Dockeriprange"
    [ "$Xconnection" = "tcp" ] && verbose "Connection to X over TCP with DISPLAY=$Tcpdisplay"
    case $Xserver in
      Xpra|Xpra-image|Xorg-image) verbose "As window manager serves: Xpra" ;;
      Hostdisplay) ;;
      *) [ "$Windowmanager" ] && verbose "As window manager from host serves: $Windowmanager" ;;
    esac
    [ -n "$Hostexe" ] && verbose "Running host application: $Hostexe"
    [ "$Adduserhome" = "yes" ] && verbose "Sharing directory $Adduserhomefolder with container as its home directory /home/$Benutzer"
    verbose "Created X server command:
$Xcommand" 
    verbose "Created docker command:
$Dockercommand"
    [ -e "$Sharefolder/x11docker_CMD" ] && verbose "Content of x11docker_CMD script:
$(cat $Sharefolder/x11docker_CMD)" 
    [ -e "$Sharefolder/Xdummy.sh" ] && verbose "Created Xdummy.sh:
$(cat $Sharefolder/Xdummy.sh)"
    [ -e "$Sharefolder/createuser" ] && verbose "Created createuser script:
$(cat $Sharefolder/createuser)"
    verbose "Created xinitrc:
$(cat $Xinitrc)"
    verbose "Logfiles are:
  $Xinitlogfile
  $Xpraserverlogfile
  $Xtermlogfile
  $Dockerlogfile
Summary logfile: $Sharefolder/x11docker.log"
    verbose "Running X server $Xserver on display $Usedisplay now ..."
    
    # option --verbose: Show logfile on stdout
    [ "$Verbose" = "yes" ] && { tail --retry -n +1 -F $Logfile & storepid $! tail ; }
}

{ #### part: option '--starter': create desktop starter & exit
  if [ "$Createdesktopstarter" = "yes" ] ; then
    X11dockerargs=$(echo $X11dockerargs | sed 's/--starter/ /')
    Name="$(echo $Imagename | tr / -) $(echo $Imagecommand | tr -cd '[:alpha:][:digit:][:blank:]-_.') x11docker"
    read -re -p "Please choose a name for your desktop starter: " -i "$Name" Name
    { echo "#!/usr/bin/xdg-open
[Desktop Entry]
Type=Application
Name=$Name
Exec=$0 $X11dockerargs
Icon=system-run
Comment=
Categories=System
Keywords=docker x11docker $(echo $Name | tr -c '[:alpha:][:digit:][:blank:]' ' ' )"
    case $(command -v x11docker) in 
      "")echo "TryExec=$0 $X11dockerargs" ;;
      *) echo "TryExec=x11docker $X11dockerargs" ;;
    esac
    } > "`xdg-user-dir DESKTOP`/$Name.desktop"
    verbose "Created desktop icon `xdg-user-dir DESKTOP`/$Name.desktop"
    exit 0
  fi
}

{ #### Finally: run new X server
  # create summary logfile
  tail --retry -n +1 -F $Xtermlogfile $Dockerlogfile $Xpraserverlogfile $Xinitlogfile 2>/dev/null >>$Logfile & storepid $! tail
  case $Xserver in
    Xorg|Xpra|Xephyr|Xdummy)                         xinit $Xinitrc -- $Xcommand  > $Xinitlogfile 2>&1  ;;
    Hostdisplay|Xpra-image|Xorg-image|Xdummy-image)  bash  $Xinitrc               > $Xinitlogfile 2>&1  ;;
  esac
  exit # trap EXIT will call finish()
}
